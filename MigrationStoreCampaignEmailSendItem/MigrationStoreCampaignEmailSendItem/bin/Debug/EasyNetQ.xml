<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyNetQ</name>
    </assembly>
    <members>
        <member name="T:EasyNetQ.AdvancedBusEventHandlers">
            <summary>
            Represents a handler container for events available in <see cref="T:EasyNetQ.IAdvancedBus"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.AdvancedBusEventHandlers.Connected">
            <summary>
            An event handler for <see cref="E:EasyNetQ.IAdvancedBus.Connected"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.AdvancedBusEventHandlers.Disconnected">
            <summary>
            An event handler for <see cref="E:EasyNetQ.IAdvancedBus.Disconnected"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.AdvancedBusEventHandlers.Blocked">
            <summary>
            An event handler for <see cref="E:EasyNetQ.IAdvancedBus.Blocked"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.AdvancedBusEventHandlers.Unblocked">
            <summary>
            An event handler for <see cref="E:EasyNetQ.IAdvancedBus.Unblocked"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.AdvancedBusEventHandlers.MessageReturned">
            <summary>
            An event handler for <see cref="E:EasyNetQ.IAdvancedBus.MessageReturned"/>.
            </summary>
        </member>
        <member name="T:EasyNetQ.AutoSubscribe.AutoSubscriber">
            <summary>
            Lets you scan assemblies for implementations of <see cref="T:EasyNetQ.AutoSubscribe.IConsume`1"/> so that
            these will get registered as subscribers in the bus.
            </summary>
        </member>
        <member name="P:EasyNetQ.AutoSubscribe.AutoSubscriber.SubscriptionIdPrefix">
            <summary>
            Used when generating the unique SubscriptionId checksum.
            </summary>
        </member>
        <member name="P:EasyNetQ.AutoSubscribe.AutoSubscriber.AutoSubscriberMessageDispatcher">
            <summary>
            Responsible for consuming a message with the relevant message consumer.
            </summary>
        </member>
        <member name="P:EasyNetQ.AutoSubscribe.AutoSubscriber.GenerateSubscriptionId">
            <summary>
            Responsible for generating SubscriptionIds, when you use
            <see cref="T:EasyNetQ.AutoSubscribe.IConsume`1"/>, since it does not let you specify
            specific SubscriptionIds.
            Message type and SubscriptionId is the key; which if two
            equal keys exists, you will get round robin consumption of
            messages.
            </summary>
        </member>
        <member name="P:EasyNetQ.AutoSubscribe.AutoSubscriber.ConfigureSubscriptionConfiguration">
            <summary>
            Responsible for setting subscription configuration for all 
            auto subscribed consumers <see cref="T:EasyNetQ.AutoSubscribe.IConsume`1"/>.
            the values may be overriden for particular consumer 
            methods by using an <see cref="T:EasyNetQ.AutoSubscribe.SubscriptionConfigurationAttribute"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.AutoSubscribe.AutoSubscriber.Subscribe(System.Reflection.Assembly[])">
            <summary>
            Registers all consumers in passed assembly. The actual Subscriber instances is
            created using <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.AutoSubscriberMessageDispatcher"/>. The SubscriptionId per consumer
            method is determined by <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.GenerateSubscriptionId"/> or if the method
            is marked with <see cref="T:EasyNetQ.AutoSubscribe.AutoSubscriberConsumerAttribute"/> with a custom SubscriptionId.
            </summary>
            <param name="assemblies">The assemblies to scan for consumers.</param>
        </member>
        <member name="M:EasyNetQ.AutoSubscribe.AutoSubscriber.Subscribe(System.Type[])">
            <summary>
            Registers all types as consumers. The actual Subscriber instances is
            created using <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.AutoSubscriberMessageDispatcher"/>. The SubscriptionId per consumer
            method is determined by <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.GenerateSubscriptionId"/> or if the method
            is marked with <see cref="T:EasyNetQ.AutoSubscribe.AutoSubscriberConsumerAttribute"/> with a custom SubscriptionId.
            </summary>
            <param name="consumerTypes">the types to register as consumers.</param>
        </member>
        <member name="M:EasyNetQ.AutoSubscribe.AutoSubscriber.SubscribeAsync(System.Reflection.Assembly[])">
            <summary>
            Registers all async consumers in passed assembly. The actual Subscriber instances is
            created using <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.AutoSubscriberMessageDispatcher"/>. The SubscriptionId per consumer
            method is determined by <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.GenerateSubscriptionId"/> or if the method
            is marked with <see cref="T:EasyNetQ.AutoSubscribe.AutoSubscriberConsumerAttribute"/> with a custom SubscriptionId.
            </summary>
            <param name="assemblies">The assemblies to scan for consumers.</param>
        </member>
        <member name="M:EasyNetQ.AutoSubscribe.AutoSubscriber.SubscribeAsync(System.Type[])">
            <summary>
            Registers all async consumers in passed assembly. The actual Subscriber instances is
            created using <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.AutoSubscriberMessageDispatcher"/>. The SubscriptionId per consumer
            method is determined by <seealso cref="P:EasyNetQ.AutoSubscribe.AutoSubscriber.GenerateSubscriptionId"/> or if the method
            is marked with <see cref="T:EasyNetQ.AutoSubscribe.AutoSubscriberConsumerAttribute"/> with a custom SubscriptionId.
            </summary>
            <param name="consumerTypes">the types to register as consumers.</param>
        </member>
        <member name="T:EasyNetQ.IBasicGetResult`1">
            <summary>
            The result of the AdvancedBus Get method
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EasyNetQ.IBasicGetResult`1.MessageAvailable">
            <summary>
            True if a message is available, false if not.
            </summary>
        </member>
        <member name="P:EasyNetQ.IBasicGetResult`1.Message">
            <summary>
            The message retrieved from the queue. 
            This property will throw a MessageNotAvailableException if no message
            was available. You should check the MessageAvailable property before
            attempting to access it.
            </summary>
        </member>
        <member name="P:EasyNetQ.ConnectionConfiguration.RequestedHeartbeat">
            <summary>
            Heartbeat interval seconds. (default is 10)
            </summary>
        </member>
        <member name="P:EasyNetQ.ConnectionConfiguration.Timeout">
            <summary>
            Operation timeout seconds. (default is 10)
            </summary>
        </member>
        <member name="M:EasyNetQ.ConnectionString.ConnectionStringGrammar.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Stolen from SO:
            http://stackoverflow.com/questions/4596453/create-an-actiont-to-set-a-property-when-i-am-provided-with-the-linq-expres
            </summary>
            <typeparam name="TContaining"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="T:EasyNetQ.Consumer.ConsumerDispatcherFactory">
            <summary>
            The default ConsumerDispatcherFactory. It creates a single dispatch
            queue which all consumers share.
            </summary>
        </member>
        <member name="M:EasyNetQ.Consumer.ConsumerFactory.CreateConsumerInstance(EasyNetQ.Topology.IQueue,System.Func{System.Byte[],EasyNetQ.MessageProperties,EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task},EasyNetQ.IPersistentConnection,EasyNetQ.Consumer.IConsumerConfiguration)">
            <summary>
            Create the correct implementation of IConsumer based on queue properties
            </summary>
            <param name="queue"></param>
            <param name="onMessage"></param>
            <param name="connection"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:EasyNetQ.Consumer.DefaultConsumerErrorStrategy">
            <summary>
            A strategy for dealing with failed messages. When a message consumer throws, HandleConsumerError is invoked.
            
            The general principle is to put all failed messages in a dedicated error queue so that they can be 
            examined and retried (or ignored).
            
            Each failed message is wrapped in a special system message, 'Error' and routed by a special exchange
            named after the original message's routing key. This is so that ad-hoc queues can be attached for
            errors on specific message types.
            
            Each exchange is bound to the central EasyNetQ error queue.
            </summary>
        </member>
        <member name="M:EasyNetQ.Consumer.IConsumerErrorStrategy.HandleConsumerError(EasyNetQ.Consumer.ConsumerExecutionContext,System.Exception)">
            <summary>
            This method is fired when an exception is thrown. Implement a strategy for
            handling the exception here.
            </summary>
            <param name="context">The consumer execution context.</param>
            <param name="exception">The exception</param>
            <returns><see cref="T:EasyNetQ.Consumer.AckStrategy"/> for processing the original failed message</returns>
        </member>
        <member name="M:EasyNetQ.Consumer.IConsumerErrorStrategy.HandleConsumerCancelled(EasyNetQ.Consumer.ConsumerExecutionContext)">
            <summary>
            This method is fired when the task returned from the UserHandler is cancelled. 
            Implement a strategy for handling the cancellation here.
            </summary>
            <param name="context">The consumer execution context.</param>
            <returns><see cref="T:EasyNetQ.Consumer.AckStrategy"/> for processing the original cancelled message</returns>
        </member>
        <member name="M:EasyNetQ.Consumer.IHandlerRegistration.Add``1(System.Func{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task})">
            <summary>
            Add an asynchronous handler
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Consumer.IHandlerRegistration.Add``1(System.Action{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo})">
            <summary>
            Add a synchronous handler
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="P:EasyNetQ.Consumer.IHandlerRegistration.ThrowOnNoMatchingHandler">
            <summary>
            Set to true if the handler collection should throw an EasyNetQException when no
            matching handler is found, or false if it should return a noop handler.
            Default is true.
            </summary>
        </member>
        <member name="M:EasyNetQ.Consumer.IHandlerCollection.GetHandler``1">
            <summary>
            Retrieve a handler from the collection.
            If a matching handler cannot be found, the handler collection will either throw
            an EasyNetQException, or return null, depending on the value of the 
            ThrowOnNoMatchingHandler property.
            </summary>
            <typeparam name="T">The type of handler to return</typeparam>
            <returns>The handler</returns>
        </member>
        <member name="M:EasyNetQ.Consumer.IHandlerCollection.GetHandler(System.Type)">
            <summary>
            Retrieve a handler from the collection.
            If a matching handler cannot be found, the handler collection will either throw
            an EasyNetQException, or return null, depending on the value of the 
            ThrowOnNoMatchingHandler property.
            </summary>
            <param name="messageType">The type of handler to return</param>
            <returns>The handler</returns>
        </member>
        <member name="M:EasyNetQ.Consumer.BasicConsumer.Cancel">
            <summary>
            Cancel means that an external signal has requested that this consumer should
            be cancelled. This is _not_ the same as when an internal consumer stops consuming
            because it has lost its channel/connection.
            </summary>
        </member>
        <member name="M:EasyNetQ.Consumer.IReceiveRegistration.Add``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Add an asynchronous message handler to this receiver
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="onMessage">The message handler</param>
            <returns>'this' for fluent configuration</returns>
        </member>
        <member name="M:EasyNetQ.Consumer.IReceiveRegistration.Add``1(System.Action{``0})">
            <summary>
            Add a message handler to this receiver
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="onMessage">The message handler</param>
            <returns>'this' for fluent configuration</returns>
        </member>
        <member name="M:EasyNetQ.ConventionsExtensions.EnableLegacyConventions(EasyNetQ.DI.IServiceRegister)">
            <summary>
            Shortcut for EnableLegacyTypeNaming() + EnableLegacyRpcConventions()
            </summary>
        </member>
        <member name="T:EasyNetQ.DI.DefaultServicesRegistration">
            <summary>
            Registers the default EasyNetQ components
            </summary>
        </member>
        <member name="T:EasyNetQ.DI.IServiceRegister">
            <summary>
            Register services
            </summary>
        </member>
        <member name="M:EasyNetQ.DI.IServiceRegister.Register``2(EasyNetQ.DI.Lifetime)">
            <summary>
            Register a service. Note that the first registration wins. All subsequent registrations
            will be ignored.
            </summary>
            <typeparam name="TService">The type of the service to be registered</typeparam>
            <typeparam name="TImplementation">The implementation type</typeparam>
            <param name="lifetime">A lifetime of a container registration</param>
            <returns>itself for nice fluent composition</returns>
        </member>
        <member name="M:EasyNetQ.DI.IServiceRegister.Register``1(``0)">
            <summary>
            Register a service. Note that the first registration wins. All subsequent registrations
            will be ignored.
            </summary>
            <typeparam name="TService">The type of the service to be registered</typeparam>
            <param name="instance">The instance of the service</param>
            <returns>itself for nice fluent composition</returns>
        </member>
        <member name="M:EasyNetQ.DI.IServiceRegister.Register``1(System.Func{EasyNetQ.DI.IServiceResolver,``0},EasyNetQ.DI.Lifetime)">
            <summary>
            Register a service. Note that the first registration wins. All subsequent registrations
            will be ignored.
            </summary>
            <typeparam name="TService">The type of the service to be registered</typeparam>
            <param name="factory">The instance factory of the service</param>
            <param name="lifetime">A lifetime of a container registration</param>
            <returns>itself for nice fluent composition</returns>
        </member>
        <member name="T:EasyNetQ.DI.IServiceResolver">
            <summary>
            Provides service instances and creates separate scopes
            </summary>
        </member>
        <member name="M:EasyNetQ.DI.IServiceResolver.Resolve``1">
            <summary>
            Get an instance of the requested services
            </summary>
            <typeparam name="TService">The type of service to return</typeparam>
            <returns>The instance of the service</returns>
        </member>
        <member name="M:EasyNetQ.DI.IServiceResolver.CreateScope">
            <summary>
            Begin a new scope. Component instances created via the new scope
            will be disposed along with it
            </summary>
            <returns>A new scope</returns>
        </member>
        <member name="T:EasyNetQ.DI.IServiceResolverScope">
            <summary>
            Provides service instances in separate scope    
            </summary>
        </member>
        <member name="T:EasyNetQ.DI.Lifetime">
            <summary>
            Represents the lifetime of a container registration
            </summary>
        </member>
        <member name="F:EasyNetQ.DI.Lifetime.Transient">
            <summary>
            Transient lifetime - each request to the container for
            the type will result in a new version being returned.
            </summary>
        </member>
        <member name="F:EasyNetQ.DI.Lifetime.Singleton">
            <summary>
            Singleton - each request to the container for the type
            will result in the same instance being returned.
            </summary>
        </member>
        <member name="T:EasyNetQ.Events.StartConsumingFailedEvent">
            <summary>
            This event is fired when the consumer cannot start consuming successfully.
            </summary>
        </member>
        <member name="T:EasyNetQ.Events.StartConsumingSucceededEvent">
            <summary>
            This event is fired when the consumer starts consuming successfully.
            </summary>
        </member>
        <member name="T:EasyNetQ.Events.StoppedConsumingEvent">
            <summary>
            This event is fired when the logical consumer stops consuming.
            
            This is _not_ fired when a connection interruption causes EasyNetQ to re-create
            a PersistentConsumer.
            </summary>
        </member>
        <member name="T:EasyNetQ.FluentConfiguration.IPublishConfiguration">
             <summary>
             Allows publish configuration to be fluently extended without adding overloads to IBus
            
             e.g.
             x => x.WithTopic("*.brighton").WithPriority(2)
             </summary>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.IPublishConfiguration.WithPriority(System.Byte)">
            <summary>
            Sets a priority of the message
            </summary>
            <param name="priority">The priority to set</param>
            <returns>IPublishConfiguration</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.IPublishConfiguration.WithTopic(System.String)">
            <summary>
            Sets a topic for the message
            </summary>
            <param name="topic">The topic to set</param>
            <returns>IPublishConfiguration</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.IPublishConfiguration.WithExpires(System.Int32)">
            <summary>
            Sets a TTL for the message
            </summary>
            <param name="expires">The TTL to set in milliseconds</param>
            <returns>IPublishConfiguration</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.IPublishConfiguration.WithQueueName(System.String)">
            <summary>
            Sets the queue name to publish to
            </summary>
            <param name="queueName">The queue name</param>
            <returns>IPublishConfiguration</returns>
        </member>
        <member name="T:EasyNetQ.FluentConfiguration.IRequestConfiguration">
            <summary>
            Allows request configuration to be fluently extended without adding overloads to IBus
            
            e.g.
            x => x.WithQueueName("MyQueue")
            </summary>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.IRequestConfiguration.WithQueueName(System.String)">
            <summary>
            Sets the queue name to publish to
            </summary>
            <param name="queueName">The queue name</param>
            <returns>IPublishConfiguration</returns>
        </member>
        <member name="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration">
            <summary>
            Allows configuration to be fluently extended without adding overloads to IBus
            
            e.g.
            x => x.WithTopic("*.brighton")
            </summary>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithTopic(System.String)">
            <summary>
            Add a topic for the queue binding
            </summary>
            <param name="topic">The topic to add</param>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithAutoDelete(System.Boolean)">
            <summary>
            Configures the queue's durability
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithDurable(System.Boolean)">
            <summary>
            Configures the queue's durability
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithPriority(System.Int32)">
            <summary>
            Configures the consumer's priority
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithPrefetchCount(System.UInt16)">
            <summary>
            Configures the consumer's prefetch count
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithExpires(System.Int32)">
            <summary>
            Expiry time can be set for a given queue by setting the x-expires argument to queue.declare, or by setting the expires policy. 
            This controls for how long a queue can be unused before it is automatically deleted. 
            Unused means the queue has no consumers, the queue has not been redeclared, and basic.get has not been invoked for a duration of at least the expiration period. 
            This can be used, for example, for RPC-style reply queues, where many queues can be created which may never be drained.
            The server guarantees that the queue will be deleted, if unused for at least the expiration period. 
            No guarantee is given as to how promptly the queue will be removed after the expiration period has elapsed. 
            Leases of durable queues restart when the server restarts.
            </summary>
            <param name="expires">The value of the x-expires argument or expires policy describes the expiration period in milliseconds and is subject to the same constraints as x-message-ttl and cannot be zero. Thus a value of 1000 means a queue which is unused for 1 second will be deleted.</param>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.AsExclusive(System.Boolean)">
            <summary>
            Configures the consumer's to be exclusive
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithMaxPriority(System.Byte)">
            <summary>
            Configures the queue's maxPriority
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithQueueName(System.String)">
            <summary>
            Sets the queue name
            </summary>
            <param name="queueName"></param>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithMaxLength(System.Int32)">
            <summary>
            The maximum number of ready messages that may exist on the queue. 
            Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached.
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration.WithMaxLengthBytes(System.Int32)">
            <summary>
            The maximum size of the queue in bytes.
            Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.FluentConfiguration.ISubscriptionConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="T:EasyNetQ.IAdvancedBus">
            <summary>
            IAdvancedBus is a lower level API than IBus which gives you fined grained control
            of routing topology, but keeping the EasyNetQ serialization, persistent connection,
            error handling and subscription thread.
            </summary>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(System.Collections.Generic.IEnumerable{EasyNetQ.QueueConsumerPair},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume a stream of messages
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="queueConsumerPairs">Multiple queue - consumer pairs</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume``1(EasyNetQ.Topology.IQueue,System.Action{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo})">
            <summary>
            Consume a stream of messages
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="queue">The queue to take messages from</param>
            <param name="onMessage">The message handler</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume``1(EasyNetQ.Topology.IQueue,System.Action{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume a stream of messages
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="queue">The queue to take messages from</param>
            <param name="onMessage">The message handler</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume``1(EasyNetQ.Topology.IQueue,System.Func{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task})">
            <summary>
            Consume a stream of messages asynchronously
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="queue">The queue to take messages from</param>
            <param name="onMessage">The message handler</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume``1(EasyNetQ.Topology.IQueue,System.Func{EasyNetQ.IMessage{``0},EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume a stream of messages asynchronously
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="queue">The queue to take messages from</param>
            <param name="onMessage">The message handler</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Action{EasyNetQ.Consumer.IHandlerRegistration})">
            <summary>
            Consume a stream of messages. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers to the consumer</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Action{EasyNetQ.Consumer.IHandlerRegistration},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume a stream of messages. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers to the consumer</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Action{System.Byte[],EasyNetQ.MessageProperties,EasyNetQ.MessageReceivedInfo})">
            <summary>
            Consume raw bytes from the queue.
            </summary>
            <param name="queue">The queue to subscribe to</param>
            <param name="onMessage">
            The message handler. Takes the message body, message properties and some information about the
            receive context.
            </param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Action{System.Byte[],EasyNetQ.MessageProperties,EasyNetQ.MessageReceivedInfo},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume raw bytes from the queue.
            </summary>
            <param name="queue">The queue to subscribe to</param>
            <param name="onMessage">
            The message handler. Takes the message body, message properties and some information about the
            receive context.
            </param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Func{System.Byte[],EasyNetQ.MessageProperties,EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task})">
            <summary>
            Consume raw bytes from the queue.
            </summary>
            <param name="queue">The queue to subscribe to</param>
            <param name="onMessage">
            The message handler. Takes the message body, message properties and some information about the
            receive context. Returns a Task.
            </param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Consume(EasyNetQ.Topology.IQueue,System.Func{System.Byte[],EasyNetQ.MessageProperties,EasyNetQ.MessageReceivedInfo,System.Threading.Tasks.Task},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Consume raw bytes from the queue.
            </summary>
            <param name="queue">The queue to subscribe to</param>
            <param name="onMessage">
            The message handler. Takes the message body, message properties and some information about the
            receive context. Returns a Task.
            </param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithPriority(10)</param>
            <returns>A disposable to cancel the consumer</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Publish(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.MessageProperties,System.Byte[])">
            <summary>
            Publish a message as a byte array
            </summary>
            <param name="exchange">The exchange to publish to</param>
            <param name="routingKey">
            The routing key for the message. The routing key is used for routing messages depending on the
            exchange configuration.</param>
            <param name="mandatory">
            This flag tells the server how to react if the message cannot be routed to a queue.
            If this flag is true, the server will return an unroutable message with a Return method.
            If this flag is false, the server silently drops the message.
            </param>
            <param name="messageProperties">The message properties</param>
            <param name="body">The message body</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Publish``1(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.IMessage{``0})">
            <summary>
            Publish a message as a .NET type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exchange">The exchange to publish to</param>
            <param name="routingKey">
            The routing key for the message. The routing key is used for routing messages depending on the
            exchange configuration.</param>
            <param name="mandatory">
            This flag tells the server how to react if the message cannot be routed to a queue.
            If this flag is true, the server will return an unroutable message with a Return method.
            If this flag is false, the server silently drops the message.
            </param>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.PublishAsync(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.IMessage)">
            <summary>
            Publish a message as a .NET type when the type is only known at runtime.
            Use the generic version of this method <see cref="M:EasyNetQ.IAdvancedBus.PublishAsync``1(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.IMessage{``0})"/> when you know the type of the message at compile time.
            Task completes after publish has completed. If publisherConfirms=true is set in the connection string,
            the task completes after an ACK is received. The task will throw on either NACK or timeout.
            </summary>
            <param name="exchange">The exchange to publish to</param>
            <param name="routingKey">
            The routing key for the message. The routing key is used for routing messages depending on the
            exchange configuration.</param>
            <param name="mandatory">
            This flag tells the server how to react if the message cannot be routed to a queue.
            If this flag is true, the server will return an unroutable message with a Return method.
            If this flag is false, the server silently drops the message.
            </param>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.PublishAsync``1(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.IMessage{``0})">
            <summary>
            Publish a message as a .NET type
            Task completes after publish has completed. If publisherConfirms=true is set in the connection string,
            the task completes after an ACK is received. The task will throw on either NACK or timeout.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exchange">The exchange to publish to</param>
            <param name="routingKey">
            The routing key for the message. The routing key is used for routing messages depending on the
            exchange configuration.</param>
            <param name="mandatory">
            This flag tells the server how to react if the message cannot be routed to a queue.
            If this flag is true, the server will return an unroutable message with a Return method.
            If this flag is false, the server silently drops the message.
            </param>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.PublishAsync(EasyNetQ.Topology.IExchange,System.String,System.Boolean,EasyNetQ.MessageProperties,System.Byte[])">
            <summary>
            Publish a message as a byte array.
            Task completes after publish has completed. If publisherConfirms=true is set in the connection string,
            the task completes after an ACK is received. The task will throw on either NACK or timeout.
            </summary>
            <param name="exchange">The exchange to publish to</param>
            <param name="routingKey">
            The routing key for the message. The routing key is used for routing messages depending on the
            exchange configuration.</param>
            <param name="mandatory">
            This flag tells the server how to react if the message cannot be routed to a queue.
            If this flag is true, the server will return an unroutable message with a Return method.
            If this flag is false, the server silently drops the message.
            </param>
            <param name="messageProperties">The message properties</param>
            <param name="body">The message body</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Declare a queue. If the queue already exists this method does nothing
            </summary>
            <param name="name">The name of the queue</param>
            <param name="passive">Throw an exception rather than create the queue if it doesn't exist</param>
            <param name="durable">Durable queues remain active when a server restarts.</param>
            <param name="exclusive">Exclusive queues may only be accessed by the current connection, and are deleted when that connection closes.</param>
            <param name="autoDelete">If set, the queue is deleted when all consumers have finished using it.</param>
            <param name="perQueueMessageTtl">Determines how long a message published to a queue can live before it is discarded by the server.</param>
            <param name="expires">Determines how long a queue can remain unused before it is automatically deleted by the server.</param>
            <param name="maxPriority">Determines the maximum message priority that the queue should support.</param>
            <param name="deadLetterExchange">Determines an exchange's name can remain unused before it is automatically deleted by the server.</param>
            <param name="deadLetterRoutingKey">If set, will route message with the routing key specified, if not set, message will be routed with the same routing keys they were originally published with.</param>
            <param name="maxLength">The maximum number of ready messages that may exist on the queue.  Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached</param>
            <param name="maxLengthBytes">The maximum size of the queue in bytes.  Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached</param>
            <returns>
            The queue
            </returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueueDeclareAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Declare a queue. If the queue already exists this method does nothing
            </summary>
            <param name="name">The name of the queue</param>
            <param name="passive">Throw an exception rather than create the queue if it doesn't exist</param>
            <param name="durable">Durable queues remain active when a server restarts.</param>
            <param name="exclusive">Exclusive queues may only be accessed by the current connection, and are deleted when that connection closes.</param>
            <param name="autoDelete">If set, the queue is deleted when all consumers have finished using it.</param>
            <param name="perQueueMessageTtl">Determines how long a message published to a queue can live before it is discarded by the server.</param>
            <param name="expires">Determines how long a queue can remain unused before it is automatically deleted by the server.</param>
            <param name="maxPriority">Determines the maximum message priority that the queue should support.</param>
            <param name="deadLetterExchange">Determines an exchange's name can remain unused before it is automatically deleted by the server.</param>
            <param name="deadLetterRoutingKey">If set, will route message with the routing key specified, if not set, message will be routed with the same routing keys they were originally published with.</param>
            <param name="maxLength">The maximum number of ready messages that may exist on the queue.  Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached</param>
            <param name="maxLengthBytes">The maximum size of the queue in bytes.  Messages will be dropped or dead-lettered from the front of the queue to make room for new messages once the limit is reached</param>
            <returns>The queue</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueueDelete(EasyNetQ.Topology.IQueue,System.Boolean,System.Boolean)">
            <summary>
            Delete a queue
            </summary>
            <param name="queue">The queue to delete</param>
            <param name="ifUnused">Only delete if unused</param>
            <param name="ifEmpty">Only delete if empty</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueuePurge(EasyNetQ.Topology.IQueue)">
            <summary>
            Purges a queue
            </summary>
            <param name="queue">The queue to purge</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Declare an exchange
            </summary>
            <param name="name">The exchange name</param>
            <param name="type">The type of exchange</param>
            <param name="passive">Throw an exception rather than create the exchange if it doesn't exist</param>
            <param name="durable">Durable exchanges remain active when a server restarts.</param>
            <param name="autoDelete">If set, the exchange is deleted when all queues have finished using it.</param>
            <param name="internal">If set, the exchange may not be used directly by publishers, but only when bound to other exchanges.</param>
            <param name="alternateExchange">Route messages to this exchange if they cannot be routed.</param>
            <param name="delayed">If set, declares x-delayed-type exchange for routing delayed messages.</param>
            <returns>The exchange</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.ExchangeDeclareAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Declare an exchange
            </summary>
            <param name="name">The exchange name</param>
            <param name="type">The type of exchange</param>
            <param name="passive">Throw an exception rather than create the exchange if it doesn't exist</param>
            <param name="durable">Durable exchanges remain active when a server restarts.</param>
            <param name="autoDelete">If set, the exchange is deleted when all queues have finished using it.</param>
            <param name="internal">If set, the exchange may not be used directly by publishers, but only when bound to other exchanges.</param>
            <param name="alternateExchange">Route messages to this exchange if they cannot be routed.</param>
            <param name="delayed">If set, declares x-delayed-type exchange for routing delayed messages.</param>
            <returns>The exchange</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.ExchangeDelete(EasyNetQ.Topology.IExchange,System.Boolean)">
            <summary>
            Delete an exchange
            </summary>
            <param name="exchange">The exchange to delete</param>
            <param name="ifUnused">If set, the server will only delete the exchange if it has no queue bindings.</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Bind(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IQueue,System.String)">
            <summary>
            Bind an exchange to a queue. Does nothing if the binding already exists.
            </summary>
            <param name="exchange">The exchange to bind</param>
            <param name="queue">The queue to bind</param>
            <param name="routingKey">The routing key</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Bind(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IQueue,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind an exchange to a queue. Does nothing if the binding already exists.
            </summary>
            <param name="exchange">The exchange to bind</param>
            <param name="queue">The queue to bind</param>
            <param name="routingKey">The routing key</param>
            <param name="headers">The headers</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.BindAsync(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IQueue,System.String)">
            <summary>
            Bind an exchange to a queue. Does nothing if the binding already exists.
            </summary>
            <param name="exchange">The exchange to bind</param>
            <param name="queue">The queue to bind</param>
            <param name="routingKey">The routing key</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.BindAsync(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IQueue,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind an exchange to a queue. Does nothing if the binding already exists.
            </summary>
            <param name="exchange">The exchange to bind</param>
            <param name="queue">The queue to bind</param>
            <param name="routingKey">The routing key</param>
            <param name="headers">The headers</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Bind(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IExchange,System.String)">
            <summary>
            Bind two exchanges. Does nothing if the binding already exists.
            </summary>
            <param name="source">The source exchange</param>
            <param name="destination">The destination exchange</param>
            <param name="routingKey">The routing key</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Bind(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IExchange,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind two exchanges. Does nothing if the binding already exists.
            </summary>
            <param name="source">The source exchange</param>
            <param name="destination">The destination exchange</param>
            <param name="routingKey">The routing key</param>
            <param name="headers">The headers</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.BindAsync(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IExchange,System.String)">
            <summary>
            Bind two exchanges. Does nothing if the binding already exists.
            </summary>
            <param name="source">The source exchange</param>
            <param name="destination">The destination exchange</param>
            <param name="routingKey">The routing key</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.BindAsync(EasyNetQ.Topology.IExchange,EasyNetQ.Topology.IExchange,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind two exchanges. Does nothing if the binding already exists.
            </summary>
            <param name="source">The source exchange</param>
            <param name="destination">The destination exchange</param>
            <param name="routingKey">The routing key</param>
            <param name="headers">The headers</param>
            <returns>A binding</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.BindingDelete(EasyNetQ.Topology.IBinding)">
            <summary>
            Delete a binding
            </summary>
            <param name="binding">the binding to delete</param>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Get``1(EasyNetQ.Topology.IQueue)">
            <summary>
            Get a message from the given queue.
            </summary>
            <typeparam name="T">The message type to get</typeparam>
            <param name="queue">The queue from which to retrieve the message</param>
            <returns>An IBasicGetResult.</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.Get(EasyNetQ.Topology.IQueue)">
            <summary>
            Get the raw message from the given queue.
            </summary>
            <param name="queue">The queue from which to retrieve the message</param>
            <returns>An IBasicGetResult</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.MessageCount(EasyNetQ.Topology.IQueue)">
            <summary>
            Counts messages in the given queue
            </summary>
            <param name="queue">The queue in which to count messages</param>
            <returns>The number of counted messages</returns>
        </member>
        <member name="P:EasyNetQ.IAdvancedBus.IsConnected">
            <summary>
            True if the bus is connected, False if it is not.
            </summary>
        </member>
        <member name="E:EasyNetQ.IAdvancedBus.Connected">
            <summary>
            Event fires when the bus has connected to a RabbitMQ broker.
            </summary>
        </member>
        <member name="E:EasyNetQ.IAdvancedBus.Disconnected">
            <summary>
            Event fires when the bus has disconnected from a RabbitMQ broker.
            </summary>
        </member>
        <member name="E:EasyNetQ.IAdvancedBus.Blocked">
            <summary>
            Event fires when the bus gets blocked due to the broker running low on resources.
            </summary>
        </member>
        <member name="E:EasyNetQ.IAdvancedBus.Unblocked">
            <summary>
            Event fires when the bus is unblocked.
            </summary>
        </member>
        <member name="E:EasyNetQ.IAdvancedBus.MessageReturned">
            <summary>
            Event fires when a mandatory or immediate message is returned as un-routable
            </summary>
        </member>
        <member name="P:EasyNetQ.IAdvancedBus.Container">
            <summary>
            The IoC container that EasyNetQ uses to resolve its services.
            </summary>
        </member>
        <member name="P:EasyNetQ.IAdvancedBus.Conventions">
            <summary>
            The conventions used by EasyNetQ to name its routing topology elements.
            </summary>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueueDeclare">
            <summary>
            Declare a transient server named queue. Note, this queue will only last for duration of the
            connection. If there is a connection outage, EasyNetQ will not attempt to recreate
            consumers.
            </summary>
            <returns>The queue</returns>
        </member>
        <member name="M:EasyNetQ.IAdvancedBus.QueueDeclareAsync">
            <summary>
            Declare a transient server named queue. Note, this queue will only last for duration of the
            connection. If there is a connection outage, EasyNetQ will not attempt to recreate
            consumers.
            </summary>
            <returns>The queue</returns>
        </member>
        <member name="T:EasyNetQ.IBus">
            <summary>
            Provides a simple Publish/Subscribe and Request/Response API for a message bus.
            </summary>
        </member>
        <member name="M:EasyNetQ.IBus.Publish``1(``0)">
            <summary>
            Publishes a message.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:EasyNetQ.IBus.Publish``1(``0,System.Action{EasyNetQ.FluentConfiguration.IPublishConfiguration})">
            <summary>
            Publishes a message.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithTopic("*.brighton").WithPriority(2)
            </param>
        </member>
        <member name="M:EasyNetQ.IBus.Publish``1(``0,System.String)">
            <summary>
            Publishes a message with a topic
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.IBus.PublishAsync``1(``0)">
            <summary>
            Publishes a message.
            When used with publisher confirms the task completes when the publish is confirmed.
            Task will throw an exception if the confirm is NACK'd or times out.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.IBus.PublishAsync``1(``0,System.Action{EasyNetQ.FluentConfiguration.IPublishConfiguration})">
            <summary>
            Publishes a message.
            When used with publisher confirms the task completes when the publish is confirmed.
            Task will throw an exception if the confirm is NACK'd or times out.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithTopic("*.brighton").WithPriority(2)
            </param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.IBus.PublishAsync``1(``0,System.String)">
            <summary>
            Publishes a message with a topic.
            When used with publisher confirms the task completes when the publish is confirmed.
            Task will throw an exception if the confirm is NACK'd or times out.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message to publish</param>
            <param name="topic">The topic string</param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.IBus.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribes to a stream of messages that match a .NET type.
            </summary>
            <typeparam name="T">The type to subscribe to</typeparam>
            <param name="subscriptionId">
            A unique identifier for the subscription. Two subscriptions with the same subscriptionId
            and type will get messages delivered in turn. This is useful if you want multiple subscribers
            to load balance a subscription in a round-robin fashion.
            </param>
            <param name="onMessage">
            The action to run when a message arrives. When onMessage completes the message
            receipt is Ack'd. All onMessage delegates are processed on a single thread so you should
            avoid long running blocking IO operations. Consider using SubscribeAsync
            </param>
            <returns>
            An <see cref="T:EasyNetQ.ISubscriptionResult"/>
            Call Dispose on it or on its <see cref="P:EasyNetQ.ISubscriptionResult.ConsumerCancellation"/> to cancel the subscription.
            </returns>
        </member>
        <member name="M:EasyNetQ.IBus.Subscribe``1(System.String,System.Action{``0},System.Action{EasyNetQ.FluentConfiguration.ISubscriptionConfiguration})">
            <summary>
            Subscribes to a stream of messages that match a .NET type.
            </summary>
            <typeparam name="T">The type to subscribe to</typeparam>
            <param name="subscriptionId">
            A unique identifier for the subscription. Two subscriptions with the same subscriptionId
            and type will get messages delivered in turn. This is useful if you want multiple subscribers
            to load balance a subscription in a round-robin fashion.
            </param>
            <param name="onMessage">
            The action to run when a message arrives. When onMessage completes the message
            receipt is Ack'd. All onMessage delegates are processed on a single thread so you should
            avoid long running blocking IO operations. Consider using SubscribeAsync
            </param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithTopic("uk.london")
            </param>
            <returns>
            An <see cref="T:EasyNetQ.ISubscriptionResult"/>
            Call Dispose on it or on its <see cref="P:EasyNetQ.ISubscriptionResult.ConsumerCancellation"/> to cancel the subscription.
            </returns>
        </member>
        <member name="M:EasyNetQ.IBus.SubscribeAsync``1(System.String,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to a stream of messages that match a .NET type.
            Allows the subscriber to complete asynchronously.
            </summary>
            <typeparam name="T">The type to subscribe to</typeparam>
            <param name="subscriptionId">
            A unique identifier for the subscription. Two subscriptions with the same subscriptionId
            and type will get messages delivered in turn. This is useful if you want multiple subscribers
            to load balance a subscription in a round-robin fashion.
            </param>
            <param name="onMessage">
            The action to run when a message arrives. onMessage can immediately return a Task and
            then continue processing asynchronously. When the Task completes the message will be
            Ack'd.
            </param>
            <returns>
            An <see cref="T:EasyNetQ.ISubscriptionResult"/>
            Call Dispose on it or on its <see cref="P:EasyNetQ.ISubscriptionResult.ConsumerCancellation"/> to cancel the subscription.
            </returns>
        </member>
        <member name="M:EasyNetQ.IBus.SubscribeAsync``1(System.String,System.Func{``0,System.Threading.Tasks.Task},System.Action{EasyNetQ.FluentConfiguration.ISubscriptionConfiguration})">
            <summary>
            Subscribes to a stream of messages that match a .NET type.
            </summary>
            <typeparam name="T">The type to subscribe to</typeparam>
            <param name="subscriptionId">
            A unique identifier for the subscription. Two subscriptions with the same subscriptionId
            and type will get messages delivered in turn. This is useful if you want multiple subscribers
            to load balance a subscription in a round-robin fashion.
            </param>
            <param name="onMessage">
            The action to run when a message arrives. onMessage can immediately return a Task and
            then continue processing asynchronously. When the Task completes the message will be
            Ack'd.
            </param>
            <param name="configure">
            Fluent configuration e.g. x => x.WithTopic("uk.london").WithArgument("x-message-ttl", "60")
            </param>
            <returns>
            An <see cref="T:EasyNetQ.ISubscriptionResult"/>
            Call Dispose on it or on its <see cref="P:EasyNetQ.ISubscriptionResult.ConsumerCancellation"/> to cancel the subscription.
            </returns>
        </member>
        <member name="M:EasyNetQ.IBus.Request``2(``0)">
            <summary>
            Makes an RPC style request
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="request">The request message.</param>
            <returns>The response</returns>
        </member>
        <member name="M:EasyNetQ.IBus.RequestAsync``2(``0)">
            <summary>
            Makes an RPC style request.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="request">The request message.</param>
            <returns>A task that completes when the response returns</returns>
        </member>
        <member name="M:EasyNetQ.IBus.Request``2(``0,System.Action{EasyNetQ.FluentConfiguration.IRequestConfiguration})">
            <summary>
            Makes an RPC style request
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="request">The request message.</param>
            <returns>The response</returns>
        </member>
        <member name="M:EasyNetQ.IBus.RequestAsync``2(``0,System.Action{EasyNetQ.FluentConfiguration.IRequestConfiguration})">
            <summary>
            Makes an RPC style request.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="request">The request message.</param>
            <returns>A task that completes when the response returns</returns>
        </member>
        <member name="M:EasyNetQ.IBus.Respond``2(System.Func{``0,``1})">
            <summary>
            Responds to an RPC request.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="responder">
            A function to run when the request is received. It should return the response.
            </param>
        </member>
        <member name="M:EasyNetQ.IBus.Respond``2(System.Func{``0,``1},System.Action{EasyNetQ.Producer.IResponderConfiguration})">
            <summary>
            Responds to an RPC request.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type.</typeparam>
            <param name="responder">
            A function to run when the request is received. It should return the response.
            </param>
            <param name="configure">
            A function for responder configuration
            </param>
        </member>
        <member name="M:EasyNetQ.IBus.RespondAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Responds to an RPC request asynchronously.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="responder">
            A function to run when the request is received.
            </param>
        </member>
        <member name="M:EasyNetQ.IBus.RespondAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},System.Action{EasyNetQ.Producer.IResponderConfiguration})">
            <summary>
            Responds to an RPC request asynchronously.
            </summary>
            <typeparam name="TRequest">The request type.</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="responder">
            A function to run when the request is received.
            </param>
            <param name="configure">
            A function for responder configuration
            </param>
        </member>
        <member name="M:EasyNetQ.IBus.Send``1(System.String,``0)">
            <summary>
            Send a message directly to a queue
            </summary>
            <typeparam name="T">The type of message to send</typeparam>
            <param name="queue">The queue to send to</param>
            <param name="message">The message</param>
        </member>
        <member name="M:EasyNetQ.IBus.SendAsync``1(System.String,``0)">
            <summary>
            Send a message directly to a queue
            </summary>
            <typeparam name="T">The type of message to send</typeparam>
            <param name="queue">The queue to send to</param>
            <param name="message">The message</param>
        </member>
        <member name="M:EasyNetQ.IBus.Receive``1(System.String,System.Action{``0})">
            <summary>
            Receive messages from a queue.
            Multiple calls to Receive for the same queue, but with different message types
            will add multiple message handlers to the same consumer.
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The message handler</param>
        </member>
        <member name="M:EasyNetQ.IBus.Receive``1(System.String,System.Action{``0},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive messages from a queue.
            Multiple calls to Receive for the same queue, but with different message types
            will add multiple message handlers to the same consumer.
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The message handler</param>
            <param name="configure">Action to configure consumer with</param>
        </member>
        <member name="M:EasyNetQ.IBus.Receive``1(System.String,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Receive messages from a queue.
            Multiple calls to Receive for the same queue, but with different message types
            will add multiple message handlers to the same consumer.
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The asynchronous message handler</param>
        </member>
        <member name="M:EasyNetQ.IBus.Receive``1(System.String,System.Func{``0,System.Threading.Tasks.Task},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive messages from a queue.
            Multiple calls to Receive for the same queue, but with different message types
            will add multiple message handlers to the same consumer.
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The asynchronous message handler</param>
            <param name="configure">Action to configure consumer with</param>
        </member>
        <member name="M:EasyNetQ.IBus.Receive(System.String,System.Action{EasyNetQ.Consumer.IReceiveRegistration})">
            <summary>
            Receive a message from the specified queue. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.IBus.Receive(System.String,System.Action{EasyNetQ.Consumer.IReceiveRegistration},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive a message from the specified queue. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers</param>
            <param name="configure">Action to configure consumer with</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="P:EasyNetQ.IBus.IsConnected">
            <summary>
            True if the bus is connected, False if it is not.
            </summary>
        </member>
        <member name="P:EasyNetQ.IBus.Advanced">
            <summary>
            Return the advanced EasyNetQ advanced API.
            </summary>
        </member>
        <member name="T:EasyNetQ.IClusterHostSelectionStrategy`1">
            <summary>
            Provides a strategy for selecting a host from a list of nodes in a cluster
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EasyNetQ.IClusterHostSelectionStrategy`1.Add(`0)">
            <summary>
            Add a cluster node
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EasyNetQ.IClusterHostSelectionStrategy`1.Current">
            <summary>
            Get the currently selected node
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.IClusterHostSelectionStrategy`1.Next">
            <summary>
            Move to the next node
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.IClusterHostSelectionStrategy`1.Success">
            <summary>
            Mark the current node as successfully connected
            </summary>
        </member>
        <member name="P:EasyNetQ.IClusterHostSelectionStrategy`1.Succeeded">
            <summary>
            Did the current node successfully connect?
            </summary>
        </member>
        <member name="M:EasyNetQ.IClusterHostSelectionStrategy`1.Reset">
            <summary>
            The current node has disconnected and we want to run the strategy again
            </summary>
        </member>
        <member name="T:EasyNetQ.IEventBus">
            <summary>
            An internal pub-sub bus to distribute events within EasyNetQ
            </summary>
        </member>
        <member name="P:EasyNetQ.IMessage`1.Body">
            <summary>
            The message body as a .NET type.
            This will return the same underlying object than <see cref="M:EasyNetQ.IMessage.GetBody"/> but will be strongly typed.
            </summary>
        </member>
        <member name="P:EasyNetQ.IMessage.Properties">
            <summary>
            The message properties.
            </summary>
        </member>
        <member name="M:EasyNetQ.IMessage.GetBody">
            <summary>
            The message body return as an object when we only have runtime types and can't use generics.
            </summary>
        </member>
        <member name="P:EasyNetQ.IMessage.MessageType">
            <summary>
            The message <see cref="T:System.Type"/>. This is a shortcut to GetBody().GetType().
            </summary>
        </member>
        <member name="T:EasyNetQ.Internals.AsyncLock">
            <summary>
                AsyncSemaphore should be used with a lot of care.
            </summary>
        </member>
        <member name="T:EasyNetQ.ISubscriptionResult">
            <summary>
            The result of an <see cref="T:EasyNetQ.IBus"/> Subscribe or SubscribeAsync operation.
            In order to cancel the subscription, call dispose on this object or on ConsumerCancellation.
            </summary>
        </member>
        <member name="P:EasyNetQ.ISubscriptionResult.Exchange">
            <summary>
            The <see cref="T:EasyNetQ.Topology.IExchange"/> to which <see cref="P:EasyNetQ.ISubscriptionResult.Queue"/> is bound.
            </summary>
        </member>
        <member name="P:EasyNetQ.ISubscriptionResult.Queue">
            <summary>
            The <see cref="T:EasyNetQ.Topology.IQueue"/> that the underlying <see cref="T:EasyNetQ.Consumer.IConsumer"/> is consuming.
            </summary>
        </member>
        <member name="P:EasyNetQ.ISubscriptionResult.ConsumerCancellation">
            <summary>
            The <see cref="T:EasyNetQ.Consumer.IConsumer"/> cancellation, which can be disposed to cancel the subscription.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.GetInstanceDelegate">
            <summary>
            A delegate that represents the dynamic method compiled to resolved service instances.
            </summary>
            <param name="args">The arguments used by the dynamic method that this delegate represents.</param>
            <returns>A service instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.LogLevel">
            <summary>
            Describes the logging level/severity.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.LogLevel.Info">
            <summary>
            Indicates the <see cref="T:EasyNetQ.LightInject.LogEntry"/> represents an information message.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.LogLevel.Warning">
            <summary>
            Indicates the <see cref="T:EasyNetQ.LightInject.LogEntry"/> represents a warning message.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.IServiceRegistry">
            <summary>
            Defines a set of methods used to register services into the service container.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IServiceRegistry.AvailableServices">
            <summary>
            Gets a list of <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instances that represents the
            registered services.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type,System.Type,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2(EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2(System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1(EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(System.Type,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``2(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``3(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``3(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``4(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``4(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``5(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``5(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterOrdered(System.Type,System.Type[],System.Func{System.Type,EasyNetQ.LightInject.ILifetime})">
            <summary>
            Registers the <paramref name="serviceType"/> with a set of <paramref name="implementingTypes"/> and
            ensures that service instance ordering matches the ordering of the <paramref name="implementingTypes"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingTypes">The implementing types.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of each entry in <paramref name="implementingTypes"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterOrdered(System.Type,System.Type[],System.Func{System.Type,EasyNetQ.LightInject.ILifetime},System.Func{System.Int32,System.String})">
            <summary>
            Registers the <paramref name="serviceType"/> with a set of <paramref name="implementingTypes"/> and
            ensures that service instance ordering matches the ordering of the <paramref name="implementingTypes"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingTypes">The implementing types.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of each entry in <paramref name="implementingTypes"/>.</param>
            <param name="serviceNameFormatter">The function used to format the service name based on current registration index.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{EasyNetQ.LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{EasyNetQ.LightInject.ServiceRequest,System.Object},EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Register(EasyNetQ.LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers composition roots from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{EasyNetQ.LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{EasyNetQ.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{EasyNetQ.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean},System.Func{System.Type,System.Type,System.String})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <param name="serviceNameProvider">A function delegate used to provide the service name for a service during assembly scanning.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> to register from.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            an implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            an implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterPropertyDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            an implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.RegisterAssembly(System.String)">
            <summary>
            Registers composition roots from assemblies in the base directory that match the <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern used to filter the assembly files.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Decorate(System.Type,System.Type,System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Decorate``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``0})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Decorate(EasyNetQ.LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:EasyNetQ.LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:EasyNetQ.LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Override(System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean},System.Func{EasyNetQ.LightInject.IServiceFactory,EasyNetQ.LightInject.ServiceRegistration,EasyNetQ.LightInject.ServiceRegistration})">
            <summary>
            Allows a registered service to be overridden by another <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.
            </summary>
            <param name="serviceSelector">A function delegate that is used to determine the service that should be
            overridden using the <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> returned from the <paramref name="serviceRegistrationFactory"/>.</param>
            <param name="serviceRegistrationFactory">The factory delegate used to create a <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> that overrides
            the incoming <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.Initialize(System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean},System.Action{EasyNetQ.LightInject.IServiceFactory,System.Object})">
            <summary>
            Allows post-processing of a service instance.
            </summary>
            <param name="predicate">A function delegate that determines if the given service can be post-processed.</param>
            <param name="processor">An action delegate that exposes the created service instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceRegistry.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IServiceFactory">
            <summary>
            Defines a set of methods used to retrieve service instances.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.BeginScope">
            <summary>
            Starts a new <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:EasyNetQ.LightInject.Scope"/></returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceFactory.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IServiceContainer">
            <summary>
            Represents an inversion of control container.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:EasyNetQ.LightInject.IScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ILifetime">
            <summary>
            Represents a class that manages the lifetime of a service instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ILifetime.GetInstance(System.Func{System.Object},EasyNetQ.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:EasyNetQ.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ICompositionRoot">
            <summary>
            Represents a class that acts as a composition root for an <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ICompositionRoot.Compose(EasyNetQ.LightInject.IServiceRegistry)">
            <summary>
            Composes services by adding services to the <paramref name="serviceRegistry"/>.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.ITypeExtractor">
            <summary>
            Represents a class that extracts a set of types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ITypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ICompositionRootAttributeExtractor">
            <summary>
            Represents a class that is capable of extracting
            attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ICompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IPropertySelector">
            <summary>
            Represents a class that is responsible for selecting injectable properties.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IPropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of injectable properties.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IPropertyDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IPropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:EasyNetQ.LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IConstructorDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:EasyNetQ.LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IConstructionInfoBuilder">
            <summary>
            Represents a class that is capable of building a <see cref="T:System.Reflection.ConstructorInfo"/> instance
            based on a <see cref="T:EasyNetQ.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IConstructionInfoBuilder.Execute(EasyNetQ.LightInject.Registration)">
            <summary>
            Returns a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance based on the given <see cref="T:EasyNetQ.LightInject.Registration"/>.
            </summary>
            <param name="registration">The <see cref="T:EasyNetQ.LightInject.Registration"/> for which to return a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance that describes how to create a service instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IConstructionInfoProvider">
            <summary>
            Represents a class that keeps track of a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance for each <see cref="T:EasyNetQ.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IConstructionInfoProvider.GetConstructionInfo(EasyNetQ.LightInject.Registration)">
            <summary>
            Gets a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:EasyNetQ.LightInject.Registration"/> for which to get a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ITypeConstructionInfoBuilder">
            <summary>
            Represents a class that builds a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ITypeConstructionInfoBuilder.Execute(EasyNetQ.LightInject.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:EasyNetQ.LightInject.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IGenericArgumentMapper">
            <summary>
            Represents a class that maps the generic arguments/parameters from a generic servicetype
            to a open generic implementing type.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IGenericArgumentMapper.Map(System.Type,System.Type)">
            <summary>
            Maps the generic arguments/parameters from the <paramref name="genericServiceType"/>
            to the generic arguments/parameters in the <paramref name="openGenericImplementingType"/>.
            </summary>
            <param name="genericServiceType">The generic type containing the arguments/parameters to be mapped to the generic arguments/parameters of the <paramref name="openGenericImplementingType"/>.</param>
            <param name="openGenericImplementingType">The open generic implementing type.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.GenericMappingResult"/></returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IConstructorSelector">
            <summary>
            Represents a class that selects the constructor to be used for creating a new service instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IScopeManager">
            <summary>
            Represents a class that manages <see cref="T:EasyNetQ.LightInject.Scope"/> instances.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IScopeManager.CurrentScope">
            <summary>
            Gets or sets the current <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IScopeManager.ServiceFactory">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> that is associated with this <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IScopeManager.BeginScope">
            <summary>
            Starts a new <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <returns>A new <see cref="T:EasyNetQ.LightInject.Scope"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IScopeManager.EndScope(EasyNetQ.LightInject.Scope)">
            <summary>
            Ends the given <paramref name="scope"/>.
            </summary>
            <param name="scope">The scope to be ended.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.IAssemblyLoader">
            <summary>
            Represents a class that is responsible loading a set of assemblies based on the given search pattern.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IAssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IAssemblyScanner">
            <summary>
            Represents a class that is capable of scanning an assembly and register services into an <see cref="T:EasyNetQ.LightInject.IServiceContainer"/> instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,EasyNetQ.LightInject.IServiceRegistry,System.Func{EasyNetQ.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean},System.Func{System.Type,System.Type,System.String})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <param name="serviceNameProvider">A function delegate used to provide the service name for a service during assembly scanning.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,EasyNetQ.LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.IServiceNameProvider">
            <summary>
            Represents a class that is capable of providing a service name
            to be used when a service is registered during assembly scanning.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IServiceNameProvider.GetServiceName(System.Type,System.Type)">
            <summary>
            Gets the service name for which the given <paramref name="serviceType"/> will be registered.
            </summary>
            <param name="serviceType">The service type for which to provide a service name.</param>
            <param name="implementingType">The implementing type for which to provide a service name.</param>
            <returns>The service name for which the <paramref name="serviceType"/> and <paramref name="implementingType"/> will be registered.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ICompositionRootExecutor">
            <summary>
            Represents a class that is responsible for instantiating and executing an <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ICompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:EasyNetQ.LightInject.ICompositionRoot.Compose(EasyNetQ.LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.IEmitter">
            <summary>
            Represents an abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IEmitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.IEmitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:EasyNetQ.LightInject.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.IEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IMethodSkeleton">
            <summary>
            Represents a dynamic method skeleton for emitting the code needed to resolve a service instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IMethodSkeleton.GetEmitter">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.IEmitter"/> for the this dynamic method.
            </summary>
            <returns>The <see cref="T:EasyNetQ.LightInject.IEmitter"/> for this dynamic method.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.IMethodSkeleton.CreateDelegate(System.Type)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.IScopeManagerProvider">
            <summary>
            Represents a class that is capable of providing a <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.IScopeManagerProvider.GetScopeManager(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Returns the <see cref="T:EasyNetQ.LightInject.IScopeManager"/> that is responsible for managing scopes.
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ScopeManager"/>.</param> 
            <returns>The <see cref="T:EasyNetQ.LightInject.IScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.RuntimeArgumentsLoader">
            <summary>
            This class is not for public use and is used internally
            to load runtime arguments onto the evaluation stack.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.RuntimeArgumentsLoader.Load(System.Object[])">
            <summary>
            Loads the runtime arguments onto the evaluation stack.
            </summary>
            <param name="constants">A object array representing the dynamic method context.</param>
            <returns>An array containing the runtime arguments supplied when resolving the service.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.Ensure">
            <summary>
            Contains a set of helper method related to validating
            user input.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Ensure.IsNotNull``1(``0,System.String)">
            <summary>
            Ensures that the given <paramref name="value"/> is not null.
            </summary>
            <typeparam name="T">The type of value to be validated.</typeparam>
            <param name="value">The value to be validated.</param>
            <param name="paramName">The name of the parameter from which the <paramref name="value"/> comes from.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.ServiceFactoryExtensions">
            <summary>
            Extends the <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> interface.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``1(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>   
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``1(EasyNetQ.LightInject.IServiceFactory,System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``2(EasyNetQ.LightInject.IServiceFactory,``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>             
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``2(EasyNetQ.LightInject.IServiceFactory,``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``3(EasyNetQ.LightInject.IServiceFactory,``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``3(EasyNetQ.LightInject.IServiceFactory,``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``4(EasyNetQ.LightInject.IServiceFactory,``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``4(EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``5(EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetInstance``5(EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.TryGetInstance``1(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.TryGetInstance``1(EasyNetQ.LightInject.IServiceFactory,System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.GetAllInstances``1(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceFactoryExtensions.Create``1(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <typeparam name="TService">The type of class for which to create an instance.</typeparam>
            <param name="factory">The target <see cref="T:EasyNetQ.LightInject.IServiceFactory"/>.</param>     
            <returns>An instance of <typeparamref name="TService"/>.</returns>
            <remarks>The concrete type will be registered if not already registered with the container.</remarks>
        </member>
        <member name="T:EasyNetQ.LightInject.LogExtensions">
            <summary>
            Extends the log delegate to simplify creating log entries.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.LogExtensions.Info(System.Action{EasyNetQ.LightInject.LogEntry},System.String)">
            <summary>
            Logs a new entry with the <see cref="F:EasyNetQ.LightInject.LogLevel.Info"/> level.
            </summary>
            <param name="logAction">The log delegate.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.LogExtensions.Warning(System.Action{EasyNetQ.LightInject.LogEntry},System.String)">
            <summary>
            Logs a new entry with the <see cref="F:EasyNetQ.LightInject.LogLevel.Warning"/> level.
            </summary>
            <param name="logAction">The log delegate.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.ImmutableHashTableExtensions">
            <summary>
            Extends the <see cref="T:EasyNetQ.LightInject.ImmutableHashTable`2"/> class.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTableExtensions.Search``2(EasyNetQ.LightInject.ImmutableHashTable{``0,``1},``0)">
            <summary>
            Searches for a value using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:EasyNetQ.LightInject.ImmutableHashTable`2"/> instance.</param>
            <param name="key">The key for which to search for a value.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTableExtensions.Add``2(EasyNetQ.LightInject.ImmutableHashTable{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:EasyNetQ.LightInject.ImmutableHashTable`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ImmutableHashTreeExtensions">
            <summary>
            Extends the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> class.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTreeExtensions.Search``2(EasyNetQ.LightInject.ImmutableHashTree{``0,``1},``0)">
            <summary>
            Searches for a <typeparamref name="TValue"/> using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.</param>
            <param name="key">The key of the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> to get.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTreeExtensions.Add``2(EasyNetQ.LightInject.ImmutableHashTree{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTreeExtensions.InOrder``2(EasyNetQ.LightInject.ImmutableHashTree{``0,``1})">
            <summary>
            Returns the nodes in the tree using in order traversal.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTree">The target <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.</param>
            <returns>The nodes using in order traversal.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.EmitterExtensions">
            <summary>
            Extends the <see cref="T:EasyNetQ.LightInject.IEmitter"/> interface with a set of methods
            that optimizes and simplifies emitting MSIL instructions.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.UnboxOrCast(EasyNetQ.LightInject.IEmitter,System.Type)">
            <summary>
            Performs a cast or unbox operation if the current <see cref="P:EasyNetQ.LightInject.IEmitter.StackType"/> is
            different from the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushConstant(EasyNetQ.LightInject.IEmitter,System.Int32,System.Type)">
            <summary>
            Pushes a constant value onto the evaluation stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushConstant(EasyNetQ.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes a constant value onto the evaluation stack as a object reference.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushArrayElement(EasyNetQ.LightInject.IEmitter)">
            <summary>
            Pushes the element containing an object reference at a specified index onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushArguments(EasyNetQ.LightInject.IEmitter,System.Reflection.ParameterInfo[])">
            <summary>
            Pushes the arguments associated with a service request onto the stack.
            The arguments are found as an array in the last element of the constants array
            that is passed into the dynamic method.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="parameters">A list of <see cref="T:System.Reflection.ParameterInfo"/> instances that
            represent the arguments to be pushed onto the stack.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Call(EasyNetQ.LightInject.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> that represents the method to be called.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.New(EasyNetQ.LightInject.IEmitter,System.Reflection.ConstructorInfo)">
            <summary>
            Pushes a new instance onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="constructorInfo">The <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> that represent the object to be created.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Push(EasyNetQ.LightInject.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pushes the given <paramref name="localBuilder"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> to be pushed onto the stack.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushArgument(EasyNetQ.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes an argument with the given <paramref name="index"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the argument to be pushed onto the stack.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Store(EasyNetQ.LightInject.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Stores the value currently on top of the stack in the given <paramref name="localBuilder"/>.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> for which the value is to be stored.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.PushNewArray(EasyNetQ.LightInject.IEmitter,System.Type)">
            <summary>
            Pushes a new array of the given <paramref name="elementType"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="elementType">The element <see cref="T:System.Type"/> of the new array.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Push(EasyNetQ.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes an <see cref="T:System.Int32"/> value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="value">The <see cref="T:System.Int32"/> value to be pushed onto the stack.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Cast(EasyNetQ.LightInject.IEmitter,System.Type)">
            <summary>
            Performs a cast of the value currently on top of the stack to the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the value will be casted into.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.EmitterExtensions.Return(EasyNetQ.LightInject.IEmitter)">
            <summary>
            Returns from the current method.
            </summary>
            <param name="emitter">The target <see cref="T:EasyNetQ.LightInject.IEmitter"/>.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.ContainerOptions">
            <summary>
            Represents a set of configurable options when creating a new instance of the container.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ContainerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ContainerOptions"/> class.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ContainerOptions.Default">
            <summary>
            Gets the default <see cref="T:EasyNetQ.LightInject.ContainerOptions"/> used across all <see cref="T:EasyNetQ.LightInject.ServiceContainer"/> instances.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ContainerOptions.EnableVariance">
            <summary>
            Gets or sets a value indicating whether variance is applied when resolving an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:EasyNetQ.LightInject.ContainerOptions.LogFactory">
            <summary>
            Gets or sets the log factory that crates the delegate used for logging.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ContainerOptions.EnablePropertyInjection">
            <summary>
            Gets or sets a value indicating whether property injection is enabled.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:EasyNetQ.LightInject.LogEntry">
            <summary>
            Represents a log entry.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.LogEntry.#ctor(EasyNetQ.LightInject.LogLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.LogEntry"/> class.
            </summary>
            <param name="level">The <see cref="T:System.LogLevel"/> of this entry.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.LogEntry.Level">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.LogLevel"/> for this entry.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.LogEntry.Message">
            <summary>
            Gets the log message for this entry.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.ServiceContainer">
            <summary>
            An ultra lightweight service container.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.#ctor(EasyNetQ.LightInject.ContainerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ServiceContainer"/> class.
            </summary>
            <param name="options">The <see cref="T:EasyNetQ.LightInject.ContainerOptions"/> instances that represents the configurable options.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:EasyNetQ.LightInject.IScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.PropertyDependencySelector">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IPropertyDependencySelector"/> instance that
            is responsible for selecting the property dependencies for a given type.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.CompositionRootTypeExtractor">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.ITypeExtractor"/> that is responsible
            for extracting composition roots types from an assembly.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.ServiceNameProvider">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IServiceNameProvider"/> that is responsible 
            for providing a service name for a given service during assembly scanning.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.CompositionRootExecutor">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.ICompositionRootExecutor"/> that is responsible
            for executing composition roots.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.ConstructorDependencySelector">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IConstructorDependencySelector"/> instance that
            is responsible for selecting the constructor dependencies for a given constructor.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.ConstructorSelector">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IConstructorSelector"/> instance that is responsible
            for selecting the constructor to be used when creating new service instances.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.GenericArgumentMapper">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IGenericArgumentMapper"/> that is responsible for
            mapping generic arguments.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.AssemblyScanner">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IAssemblyScanner"/> instance that is responsible for scanning assemblies.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.AssemblyLoader">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.IAssemblyLoader"/> instance that is responsible for loading assemblies during assembly scanning.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceContainer.AvailableServices">
            <summary>
            Gets a list of <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instances that represents the registered services.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.BeginScope">
            <summary>
            Starts a new <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:EasyNetQ.LightInject.Scope"/></returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{EasyNetQ.LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{EasyNetQ.LightInject.ServiceRequest,System.Object},EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(EasyNetQ.LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers composition roots from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{EasyNetQ.LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{EasyNetQ.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> to register from.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterConstructorDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterConstructorDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterPropertyDependency``1(System.Func{EasyNetQ.LightInject.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterAssembly(System.String)">
            <summary>
            Registers composition roots from assemblies in the base directory that matches the <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern used to filter the assembly files.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Decorate(System.Type,System.Type,System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Decorate``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``0})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Decorate(EasyNetQ.LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:EasyNetQ.LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:EasyNetQ.LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Override(System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean},System.Func{EasyNetQ.LightInject.IServiceFactory,EasyNetQ.LightInject.ServiceRegistration,EasyNetQ.LightInject.ServiceRegistration})">
            <summary>
            Allows a registered service to be overridden by another <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.
            </summary>
            <param name="serviceSelector">A function delegate that is used to determine the service that should be
            overridden using the <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> returned from the <paramref name="serviceRegistrationFactory"/>.</param>
            <param name="serviceRegistrationFactory">The factory delegate used to create a <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/> that overrides
            the incoming <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Initialize(System.Func{EasyNetQ.LightInject.ServiceRegistration,System.Boolean},System.Action{EasyNetQ.LightInject.IServiceFactory,System.Object})">
            <summary>
            Allows post-processing of a service instance.
            </summary>
            <param name="predicate">A function delegate that determines if the given service can be post-processed.</param>
            <param name="processor">An action delegate that exposes the created service instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type,System.Type,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type,System.Type,System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2(EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2(System.String,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type,EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1(EasyNetQ.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``1(System.Func{EasyNetQ.LightInject.IServiceFactory,``0})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``2(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``3(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``3(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``4(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``4(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``5(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register``5(System.Func{EasyNetQ.LightInject.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Dispose">
            <summary>
            Disposes any services registered using a disposable lifetime.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.Clone">
            <summary>
            Creates a clone of the current <see cref="T:EasyNetQ.LightInject.ServiceContainer"/>.
            </summary>
            <returns>A new <see cref="T:EasyNetQ.LightInject.ServiceContainer"/> instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterOrdered(System.Type,System.Type[],System.Func{System.Type,EasyNetQ.LightInject.ILifetime})">
            <summary>
            Registers the <paramref name="serviceType"/> with a set of <paramref name="implementingTypes"/> and
            ensures that service instance ordering matches the ordering of the <paramref name="implementingTypes"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingTypes">The implementing types.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of each entry in <paramref name="implementingTypes"/>.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceContainer.RegisterOrdered(System.Type,System.Type[],System.Func{System.Type,EasyNetQ.LightInject.ILifetime},System.Func{System.Int32,System.String})">
            <summary>
            Registers the <paramref name="serviceType"/> with a set of <paramref name="implementingTypes"/> and
            ensures that service instance ordering matches the ordering of the <paramref name="implementingTypes"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingTypes">The implementing types.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of each entry in <paramref name="implementingTypes"/>.</param>
            <param name="serviceNameFormatter">The function used to format the service name based on current registration index.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/>, for chaining calls.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ScopeManagerProvider">
            <summary>
            A base class for implementing <see cref="T:EasyNetQ.LightInject.IScopeManagerProvider"/>
            that ensures that only one <see cref="T:EasyNetQ.LightInject.IScopeManager"/> is created.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManagerProvider.GetScopeManager(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Returns the <see cref="T:EasyNetQ.LightInject.IScopeManager"/> that is responsible for managing scopes.
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ScopeManager"/>.</param> 
            <returns>The <see cref="T:EasyNetQ.LightInject.IScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManagerProvider.CreateScopeManager(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Creates a new <see cref="T:EasyNetQ.LightInject.IScopeManager"/> instance.
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with the <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</param> 
            <returns><see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PerThreadScopeManagerProvider">
            <summary>
            A <see cref="T:EasyNetQ.LightInject.IScopeManagerProvider"/> that provides a <see cref="T:EasyNetQ.LightInject.PerThreadScopeManager"/> per thread.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerThreadScopeManagerProvider.CreateScopeManager(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Creates a new <see cref="T:EasyNetQ.LightInject.IScopeManager"/> instance.
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with the <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</param> 
            <returns><see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PerLogicalCallContextScopeManager">
            <summary>
            Manages a set of <see cref="T:EasyNetQ.LightInject.Scope"/> instances.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerLogicalCallContextScopeManager.#ctor(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.PerLogicalCallContextScopeManager"/> class.        
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ScopeManager"/>.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.PerLogicalCallContextScopeManager.CurrentScope">
            <summary>
            Gets or sets the current <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.PerLogicalCallContextScopeManagerProvider">
            <summary>
            A <see cref="T:EasyNetQ.LightInject.IScopeManagerProvider"/> that creates an <see cref="T:EasyNetQ.LightInject.IScopeManager"/>
            that is capable of managing scopes across async points.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerLogicalCallContextScopeManagerProvider.CreateScopeManager(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Creates a new <see cref="T:EasyNetQ.LightInject.IScopeManager"/> instance.
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with the <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</param> 
            <returns><see cref="T:EasyNetQ.LightInject.IScopeManager"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ThreadSafeDictionary`2">
            <summary>
            A thread safe dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:EasyNetQ.LightInject.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ThreadSafeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ThreadSafeDictionary`2"/> class using the
            given <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys</param>
        </member>
        <member name="T:EasyNetQ.LightInject.MostResolvableConstructorSelector">
            <summary>
            Selects the <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> from a given type that represents the most resolvable constructor.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.MostResolvableConstructorSelector.#ctor(System.Func{System.Type,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.MostResolvableConstructorSelector"/> class.
            </summary>
            <param name="canGetInstance">A function delegate that determines if a service type can be resolved.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.MostResolvableConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.MostResolvableConstructorSelector.GetServiceName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service name based on the given <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which to get the service name.</param>
            <returns>The name of the service for the given <paramref name="parameter"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ConstructorDependencySelector">
            <summary>
            Selects the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:EasyNetQ.LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PropertyDependencySelector">
            <summary>
            Selects the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PropertyDependencySelector.#ctor(EasyNetQ.LightInject.IPropertySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.PropertyDependencySelector"/> class.
            </summary>
            <param name="propertySelector">The <see cref="T:EasyNetQ.LightInject.IPropertySelector"/> that is
            responsible for selecting a list of injectable properties.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.PropertyDependencySelector.PropertySelector">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.IPropertySelector"/> that is responsible for selecting a
            list of injectable properties.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:EasyNetQ.LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.TypeConstructionInfoBuilder">
            <summary>
            Builds a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeConstructionInfoBuilder.#ctor(EasyNetQ.LightInject.IConstructorSelector,EasyNetQ.LightInject.IConstructorDependencySelector,EasyNetQ.LightInject.IPropertyDependencySelector,System.Func{System.Type,System.String,System.Delegate},System.Func{System.Type,System.String,System.Delegate})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.TypeConstructionInfoBuilder"/> class.
            </summary>
            <param name="constructorSelector">The <see cref="T:EasyNetQ.LightInject.IConstructorSelector"/> that is responsible
            for selecting the constructor to be used for constructor injection.</param>
            <param name="constructorDependencySelector">The <see cref="T:EasyNetQ.LightInject.IConstructorDependencySelector"/> that is
            responsible for selecting the constructor dependencies for a given <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/>.</param>
            <param name="propertyDependencySelector">The <see cref="T:EasyNetQ.LightInject.IPropertyDependencySelector"/> that is responsible
            for selecting the property dependencies for a given <see cref="T:System.Type"/>.</param>
            <param name="getConstructorDependencyExpression">A function delegate that returns the registered constructor dependency expression, if any.</param>
            <param name="getPropertyDependencyExpression">A function delegate that returns the registered property dependency expression, if any.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeConstructionInfoBuilder.Execute(EasyNetQ.LightInject.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:EasyNetQ.LightInject.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ConstructionInfoProvider">
            <summary>
            Keeps track of a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance for each <see cref="T:EasyNetQ.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ConstructionInfoProvider.#ctor(EasyNetQ.LightInject.IConstructionInfoBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ConstructionInfoProvider"/> class.
            </summary>
            <param name="constructionInfoBuilder">The <see cref="T:EasyNetQ.LightInject.IConstructionInfoBuilder"/> that
            is responsible for building a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance based on a given <see cref="T:EasyNetQ.LightInject.Registration"/>.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.ConstructionInfoProvider.GetConstructionInfo(EasyNetQ.LightInject.Registration)">
            <summary>
            Gets a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:EasyNetQ.LightInject.Registration"/> for which to get a <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ServiceRequest">
            <summary>
            Contains information about a service request that originates from a rule based service registration.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceRequest.#ctor(System.Type,System.String,EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ServiceRequest"/> class.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ServiceRequest"/>.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRequest.ServiceType">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRequest.ServiceName">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRequest.ServiceFactory">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> that is associated with this <see cref="T:EasyNetQ.LightInject.ServiceRequest"/>.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.Registration">
            <summary>
            Base class for concrete registrations within the service container.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Registration.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Registration.ImplementingType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the <see cref="P:EasyNetQ.LightInject.Registration.ServiceType"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Registration.FactoryExpression">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Expressions.LambdaExpression"/> used to create a service instance.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.DecoratorRegistration">
            <summary>
            Contains information about a registered decorator.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.DecoratorRegistration.CanDecorate">
            <summary>
            Gets or sets a function delegate that determines if the decorator can decorate the service
            represented by the supplied <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.DecoratorRegistration.ImplementingTypeFactory">
            <summary>
            Gets or sets a <see cref="T:System.Lazy`1"/> that defers resolving of the decorators implementing type.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.DecoratorRegistration.Index">
            <summary>
            Gets or sets the index of this <see cref="T:EasyNetQ.LightInject.DecoratorRegistration"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.DecoratorRegistration.HasDeferredImplementingType">
            <summary>
            Gets a value indicating whether this registration has a deferred implementing type.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.ServiceRegistration">
            <summary>
            Contains information about a registered service.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRegistration.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRegistration.Lifetime">
            <summary>
            Gets or sets the <see cref="T:EasyNetQ.LightInject.ILifetime"/> instance that controls the lifetime of the service.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ServiceRegistration.Value">
            <summary>
            Gets or sets the value that represents the instance of the service.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceRegistration.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:EasyNetQ.LightInject.ServiceRegistration.ToString">
            <summary>
            Returns a string representation of the <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.
            </summary>
            <returns>A string representation of the <see cref="T:EasyNetQ.LightInject.ServiceRegistration"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.GenericMappingResult">
            <summary>
            Represents the result from mapping generic arguments.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.GenericMappingResult.#ctor(System.String[],System.Collections.Generic.IDictionary{System.String,System.Type},System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.GenericMappingResult"/> class.
            </summary>
            <param name="genericParameterNames">The name of the generic parameters found in the <paramref name="openGenericImplementingType"/>.</param>
            <param name="genericArgumentMap">A <see cref="T:System.Collections.Generic.IDictionary`2"/> that contains the mapping
            between a parameter name and the corresponding parameter or argument from the <paramref name="genericServiceType"/>.</param>
            <param name="genericServiceType">The generic type containing the arguments/parameters to be mapped to the generic arguments/parameters of the <paramref name="openGenericImplementingType"/>.</param>
            <param name="openGenericImplementingType">The open generic implementing type.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.GenericMappingResult.IsValid">
            <summary>
            Gets a value indicating whether the <see cref="T:EasyNetQ.LightInject.GenericMappingResult"/> is valid.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.GenericMappingResult.GetMappedArguments">
            <summary>
            Gets a list of the mapped arguments/parameters.
            In the case of an closed generic service, this list can be used to
            create a new generic type from the open generic implementing type.
            </summary>
            <returns>A list of the mapped arguments/parameters.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ConstructionInfo">
            <summary>
            Contains information about how to create a service instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ConstructionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ConstructionInfo"/> class.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructionInfo.ImplementingType">
            <summary>
            Gets or sets the implementing type that represents the concrete class to create.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructionInfo.Constructor">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ConstructorInfo"/> that is used to create a service instance.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructionInfo.PropertyDependencies">
            <summary>
            Gets a list of <see cref="T:EasyNetQ.LightInject.PropertyDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructionInfo.ConstructorDependencies">
            <summary>
            Gets a list of <see cref="T:EasyNetQ.LightInject.ConstructorDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructionInfo.FactoryDelegate">
            <summary>
            Gets or sets the function delegate to be used to create the service instance.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.Dependency">
            <summary>
            Represents a class dependency.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Dependency.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/> of the <see cref="T:EasyNetQ.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Dependency.ServiceName">
            <summary>
            Gets or sets the service name of the <see cref="T:EasyNetQ.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Dependency.FactoryExpression">
            <summary>
            Gets or sets the <see cref="P:EasyNetQ.LightInject.Dependency.FactoryExpression"/> that represent getting the value of the <see cref="T:EasyNetQ.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Dependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Dependency.IsRequired">
            <summary>
            Gets or sets a value indicating whether this dependency is required.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Dependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PropertyDependency">
            <summary>
            Represents a property dependency.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.PropertyDependency.Property">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo"/> that is used to set the property value.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.PropertyDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PropertyDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ConstructorDependency">
            <summary>
            Represents a constructor dependency.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructorDependency.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ParameterInfo"/> for this <see cref="T:EasyNetQ.LightInject.ConstructorDependency"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructorDependency.IsDecoratorTarget">
            <summary>
            Gets or sets a value indicating whether that this parameter represents
            the decoration target passed into a decorator instance.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ConstructorDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ConstructorDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PerContainerLifetime">
            <summary>
            Ensures that only one instance of a given service can exist within the current <see cref="T:EasyNetQ.LightInject.IServiceContainer"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerContainerLifetime.GetInstance(System.Func{System.Object},EasyNetQ.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:EasyNetQ.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.PerContainerLifetime.Dispose">
            <summary>
            Disposes the service instances managed by this <see cref="T:EasyNetQ.LightInject.PerContainerLifetime"/> instance.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.PerRequestLifeTime">
            <summary>
            Ensures that a new instance is created for each request in addition to tracking disposable instances.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerRequestLifeTime.GetInstance(System.Func{System.Object},EasyNetQ.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:EasyNetQ.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PerScopeLifetime">
            <summary>
            Ensures that only one service instance can exist within a given <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <remarks>
            If the service instance implements <see cref="T:System.IDisposable"/>,
            it will be disposed when the <see cref="T:EasyNetQ.LightInject.Scope"/> ends.
            </remarks>
        </member>
        <member name="M:EasyNetQ.LightInject.PerScopeLifetime.GetInstance(System.Func{System.Object},EasyNetQ.LightInject.Scope)">
            <summary>
            Returns the same service instance within the current <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:EasyNetQ.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ScopeManager">
            <summary>
            A base class for implementing <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManager.#ctor(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ScopeManager"/> class.        
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ScopeManager"/>.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.ScopeManager.CurrentScope">
            <summary>
            Gets or sets the current <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.ScopeManager.ServiceFactory">
            <summary>
            Gets the <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> that is associated with this <see cref="T:EasyNetQ.LightInject.IScopeManager"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManager.BeginScope">
            <summary>
            Starts a new <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <returns>A new <see cref="T:EasyNetQ.LightInject.Scope"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManager.EndScope(EasyNetQ.LightInject.Scope)">
            <summary>
            Ends the given <paramref name="scope"/>.
            </summary>
            <param name="scope">The scope to be ended.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.ScopeManager.GetThisScopeOrFirstValidAncestor(EasyNetQ.LightInject.Scope)">
            <summary>
            Ensures that we return a valid scope.
            </summary>
            <param name="scope">The scope to be validated.</param>
            <returns>The given <paramref name="scope"/> or the first valid ancestor.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.PerThreadScopeManager">
            <summary>
            A <see cref="T:EasyNetQ.LightInject.IScopeManager"/> that manages scopes per thread.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PerThreadScopeManager.#ctor(EasyNetQ.LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.PerThreadScopeManager"/> class.        
            </summary>
            <param name="serviceFactory">The <see cref="T:EasyNetQ.LightInject.IServiceFactory"/> to be associated with this <see cref="T:EasyNetQ.LightInject.ScopeManager"/>.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.PerThreadScopeManager.CurrentScope">
            <summary>
            Gets or sets the current <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.Scope">
            <summary>
            Represents a scope.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.#ctor(EasyNetQ.LightInject.IScopeManager,EasyNetQ.LightInject.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.Scope"/> class.
            </summary>
            <param name="scopeManager">The <see cref="F:EasyNetQ.LightInject.Scope.scopeManager"/> that manages this <see cref="T:EasyNetQ.LightInject.Scope"/>.</param>
            <param name="parentScope">The parent <see cref="T:EasyNetQ.LightInject.Scope"/>.</param>
        </member>
        <member name="E:EasyNetQ.LightInject.Scope.Completed">
            <summary>
            Raised when the <see cref="T:EasyNetQ.LightInject.Scope"/> is completed.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Scope.ParentScope">
            <summary>
            Gets the parent <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Scope.ChildScope">
            <summary>
            Gets the child <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.TrackInstance(System.IDisposable)">
            <summary>
            Registers the <paramref name="disposable"/> so that it is disposed when the scope is completed.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to register.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.Dispose">
            <summary>
            Disposes all instances tracked by this scope.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.BeginScope">
            <summary>
            Starts a new <see cref="T:EasyNetQ.LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:EasyNetQ.LightInject.Scope"/></returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.Scope.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.CompositionRootTypeAttribute">
            <summary>
            Used at the assembly level to describe the composition root(s) for the target assembly.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> class.
            </summary>
            <param name="compositionRootType">A <see cref="T:System.Type"/> that implements the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.CompositionRootTypeAttribute.CompositionRootType">
            <summary>
            Gets the <see cref="T:System.Type"/> that implements the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> interface.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.CompositionRootAttributeExtractor">
            <summary>
            A class that is capable of extracting attributes of type
            <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:EasyNetQ.LightInject.CompositionRootTypeExtractor">
            <summary>
            Extracts concrete <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> implementations from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootTypeExtractor.#ctor(EasyNetQ.LightInject.ICompositionRootAttributeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.CompositionRootTypeExtractor"/> class.
            </summary>
            <param name="compositionRootAttributeExtractor">The <see cref="T:EasyNetQ.LightInject.ICompositionRootAttributeExtractor"/>
            that is responsible for extracting attributes of type <see cref="T:EasyNetQ.LightInject.CompositionRootTypeAttribute"/> from
            a given <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.CachedTypeExtractor">
            <summary>
            A <see cref="T:EasyNetQ.LightInject.ITypeExtractor"/> cache decorator.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.CachedTypeExtractor.#ctor(EasyNetQ.LightInject.ITypeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.CachedTypeExtractor"/> class.
            </summary>
            <param name="typeExtractor">The target <see cref="T:EasyNetQ.LightInject.ITypeExtractor"/>.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.CachedTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ConcreteTypeExtractor">
            <summary>
            Extracts concrete types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ConcreteTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.CompositionRootExecutor">
            <summary>
            A class that is responsible for instantiating and executing an <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootExecutor.#ctor(EasyNetQ.LightInject.IServiceRegistry,System.Func{System.Type,EasyNetQ.LightInject.ICompositionRoot})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.CompositionRootExecutor"/> class.
            </summary>
            <param name="serviceRegistry">The <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> to be configured by the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/>.</param>
            <param name="activator">The function delegate that is responsible for creating an instance of the <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/>.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.CompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:EasyNetQ.LightInject.ICompositionRoot.Compose(EasyNetQ.LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.GenericArgumentMapper">
            <summary>
            A class that maps the generic arguments/parameters from a generic servicetype
            to a open generic implementing type.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.GenericArgumentMapper.Map(System.Type,System.Type)">
            <summary>
            Maps the generic arguments/parameters from the <paramref name="genericServiceType"/>
            to the generic arguments/parameters in the <paramref name="openGenericImplementingType"/>.
            </summary>
            <param name="genericServiceType">The generic type containing the arguments/parameters to be mapped to the generic arguments/parameters of the <paramref name="openGenericImplementingType"/>.</param>
            <param name="openGenericImplementingType">The open generic implementing type.</param>
            <returns>A <see cref="T:EasyNetQ.LightInject.GenericMappingResult"/></returns>
        </member>
        <member name="T:EasyNetQ.LightInject.AssemblyScanner">
            <summary>
            An assembly scanner that registers services based on the types contained within an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyScanner.#ctor(EasyNetQ.LightInject.ITypeExtractor,EasyNetQ.LightInject.ITypeExtractor,EasyNetQ.LightInject.ICompositionRootExecutor,EasyNetQ.LightInject.IGenericArgumentMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.AssemblyScanner"/> class.
            </summary>
            <param name="concreteTypeExtractor">The <see cref="T:EasyNetQ.LightInject.ITypeExtractor"/> that is responsible for
            extracting concrete types from the assembly being scanned.</param>
            <param name="compositionRootTypeExtractor">The <see cref="T:EasyNetQ.LightInject.ITypeExtractor"/> that is responsible for
            extracting <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/> implementations from the assembly being scanned.</param>
            <param name="compositionRootExecutor">The <see cref="T:EasyNetQ.LightInject.ICompositionRootExecutor"/> that is
            responsible for creating and executing an <see cref="T:EasyNetQ.LightInject.ICompositionRoot"/>.</param>
            <param name="genericArgumentMapper">The <see cref="T:EasyNetQ.LightInject.IGenericArgumentMapper"/> that is responsible
            for determining if an open generic type can be created from the information provided by a given abstraction.</param>
            <param name="serviceNameProvider">The <see cref="T:EasyNetQ.LightInject.IServiceNameProvider"/> that is responsible for providing
            a service name during assembly scanning.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,EasyNetQ.LightInject.IServiceRegistry,System.Func{EasyNetQ.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean},System.Func{System.Type,System.Type,System.String})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetimeFactory">The <see cref="T:EasyNetQ.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <param name="serviceNameProvider">A function delegate used to provide the service name for a service during assembly scanning.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,EasyNetQ.LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:EasyNetQ.LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.PropertySelector">
            <summary>
            Selects the properties that represents a dependency to the target <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.PropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of properties that represents a dependency to the target <paramref name="type"/></returns>
        </member>
        <member name="M:EasyNetQ.LightInject.PropertySelector.IsInjectable(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the <paramref name="propertyInfo"/> represents an injectable property.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> that describes the target property.</param>
            <returns><b>true</b> if the property is injectable, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.AssemblyLoader">
            <summary>
            Loads all assemblies from the application base directory that matches the given search pattern.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyLoader.CanLoad(System.String)">
            <summary>
            Indicates if the current <paramref name="fileName"/> represent a file that can be loaded.
            </summary>
            <param name="fileName">The name of the target file.</param>
            <returns><b>true</b> if the file can be loaded, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyLoader.LoadAssembly(System.String)">
            <summary>
            Loads <see cref="T:System.Reflection.Assembly"/> for the file located in <paramref name="filename"/>.
            </summary>
            <param name="filename">Full path to the file.</param>
            <returns><see cref="T:System.Reflection.Assembly"/> of the file.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.AssemblyLoader.GetAssemblyCodeBasePath">
            <summary>
            Gets the path where the LightInject assembly is located.
            </summary>
            <returns>The path where the LightInject assembly is located.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.KeyValue`2">
            <summary>
            Defines an immutable representation of a key and a value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:EasyNetQ.LightInject.KeyValue`2.Key">
            <summary>
            The key of this <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.KeyValue`2.Value">
            <summary>
            The key of this <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.KeyValue`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> class.
            </summary>
            <param name="key">The key of this <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> instance.</param>
            <param name="value">The value of this <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> instance.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.ImmutableList`1">
            <summary>
            Represents a simple "add only" immutable list.
            </summary>
            <typeparam name="T">The type of items contained in the list.</typeparam>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableList`1.Empty">
            <summary>
            Represents an empty <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableList`1.Items">
            <summary>
            An array that contains the items in the <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableList`1.Count">
            <summary>
            The number of items in the <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableList`1.#ctor(EasyNetQ.LightInject.ImmutableList{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/> class.
            </summary>
            <param name="previousList">The list from which the previous items are copied.</param>
            <param name="value">The value to be added to the list.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableList`1.Add(`0)">
            <summary>
            Creates a new <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/> that contains the new <paramref name="value"/>.
            </summary>
            <param name="value">The value to be added to the new list.</param>
            <returns>A new <see cref="T:EasyNetQ.LightInject.ImmutableList`1"/> that contains the new <paramref name="value"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.ImmutableHashTable`2">
            <summary>
            A simple immutable add-only hash table.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTable`2.Empty">
            <summary>
            An empty <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTable`2.Count">
            <summary>
            Gets the number of items stored in the hash table.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTable`2.Buckets">
            <summary>
            Gets the hast table buckets.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTable`2.Divisor">
            <summary>
            Gets the divisor used to calculate the bucket index from the hash code of the key.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTable`2.#ctor(EasyNetQ.LightInject.ImmutableHashTable{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ImmutableHashTable`2"/> class.
            </summary>
            <param name="previous">The "previous" hash table that contains already existing values.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTable`2.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:EasyNetQ.LightInject.ImmutableHashTable`2"/> class from being created.
            </summary>
        </member>
        <member name="T:EasyNetQ.LightInject.ImmutableHashTree`2">
            <summary>
            A balanced binary search tree implemented as an AVL tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Empty">
            <summary>
            An empty <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Key">
            <summary>
            The key of this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Value">
            <summary>
            The value of this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Duplicates">
            <summary>
            The list of <see cref="T:EasyNetQ.LightInject.KeyValue`2"/> instances where the
            <see cref="F:EasyNetQ.LightInject.KeyValue`2.Key"/> has the same hash code as this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.HashCode">
            <summary>
            The hash code retrieved from the <see cref="F:EasyNetQ.LightInject.ImmutableHashTree`2.Key"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Left">
            <summary>
            The left node of this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Right">
            <summary>
            The right node of this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.Height">
            <summary>
            The height of this node.
            </summary>
            <remarks>
            An empty node has a height of 0 and a node without children has a height of 1.
            </remarks>
        </member>
        <member name="F:EasyNetQ.LightInject.ImmutableHashTree`2.IsEmpty">
            <summary>
            Indicates that this <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> is empty.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTree`2.#ctor(`0,`1,EasyNetQ.LightInject.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> class
            and adds a new entry in the <see cref="F:EasyNetQ.LightInject.ImmutableHashTree`2.Duplicates"/> list.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="hashTree">The <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> that contains existing duplicates.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.ImmutableHashTree`2.#ctor(`0,`1,EasyNetQ.LightInject.ImmutableHashTree{`0,`1},EasyNetQ.LightInject.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.ImmutableHashTree`2"/> class.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="left">The left node.</param>
            <param name="right">The right node.</param>
        </member>
        <member name="T:EasyNetQ.LightInject.Instruction">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Instruction.#ctor(System.Reflection.Emit.OpCode,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.Instruction"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:EasyNetQ.LightInject.Instruction"/> is emitted.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.Instruction.Code">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Instruction.Emit">
            <summary>
            Gets the action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:EasyNetQ.LightInject.Instruction"/> is emitted.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Instruction.ToString">
            <summary>
            Returns the string representation of an <see cref="T:EasyNetQ.LightInject.Instruction"/>.
            </summary>
            <returns>The string representation of an <see cref="T:EasyNetQ.LightInject.Instruction"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.Instruction`1">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
            <typeparam name="T">The type of argument used in this instruction.</typeparam>
        </member>
        <member name="M:EasyNetQ.LightInject.Instruction`1.#ctor(System.Reflection.Emit.OpCode,`0,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.Instruction`1"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="argument">The argument be passed along with the given <paramref name="code"/>.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:EasyNetQ.LightInject.Instruction"/> is emitted.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.Instruction`1.Argument">
            <summary>
            Gets the argument be passed along with the given <see cref="P:EasyNetQ.LightInject.Instruction.Code"/>.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Instruction`1.ToString">
            <summary>
            Returns the string representation of an <see cref="T:EasyNetQ.LightInject.Instruction`1"/>.
            </summary>
            <returns>The string representation of an <see cref="T:EasyNetQ.LightInject.Instruction`1"/>.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.Emitter">
            <summary>
            An abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.#ctor(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:EasyNetQ.LightInject.Emitter"/> class.
            </summary>
            <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit MSIL instructions.</param>
            <param name="parameterTypes">The list of parameter types used by the current dynamic method.</param>
        </member>
        <member name="P:EasyNetQ.LightInject.Emitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:EasyNetQ.LightInject.Emitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:EasyNetQ.LightInject.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:EasyNetQ.LightInject.Emitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:EasyNetQ.LightInject.LogicalThreadStorage`1">
            <summary>
            Provides storage per logical thread of execution.
            </summary>
            <typeparam name="T">The type of the value contained in this <see cref="T:EasyNetQ.LightInject.LogicalThreadStorage`1"/>.</typeparam>
        </member>
        <member name="P:EasyNetQ.LightInject.LogicalThreadStorage`1.Value">
            <summary>
            Gets the value for the current logical thread of execution.
            </summary>
            <value>
            The value for the current logical thread of execution.
            </value>
        </member>
        <member name="T:EasyNetQ.LightInject.TypeHelper">
            <summary>
            Contains a set of extension method that represents
            a compatibility layer for reflection methods.
            </summary>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.GetMethodInfo(System.Delegate)">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            <param name="del">The target <see cref="T:System.Delegate"/>.</param>
            <returns>The method represented by the delegate.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets the custom attributes for this <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The target <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="attributeType">The type of <see cref="T:System.Attribute"/> objects to return.</param>
            <returns>The custom attributes for this <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsEnumerableOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsReadOnlyCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsReadOnlyListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsLazy(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsFunc(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsFuncWithParameters(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>,
            <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>, <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.IsClosedGeneric(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is a closed generic type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is a closed generic type; otherwise, false.</returns>
        </member>
        <member name="M:EasyNetQ.LightInject.TypeHelper.GetElementType(System.Type)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer, or reference type,
            or null if the current Type is not an array or a pointer, or is not passed by reference,
            or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.ILog">
            <summary>
                Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.ILog.Log(EasyNetQ.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
                Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
                Note to implementers: the message func should not be called if the loglevel is not enabled
                so as not to incur performance penalties.
                To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:EasyNetQ.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:EasyNetQ.Logging.Logger"/>
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogExtensions">
            <summary>
                Extension methods for the <see cref="T:EasyNetQ.Logging.ILog"/> interface.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsDebugEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsErrorEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsFatalEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsInfoEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsTraceEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.IsWarnEnabled(EasyNetQ.Logging.ILog)">
            <summary>
                Check if the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Debug(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Debug(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Debug(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Debug(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.DebugFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.DebugException(EasyNetQ.Logging.ILog,System.String,System.Exception)">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.DebugException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Error(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Error(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Error(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Error(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.ErrorFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.ErrorException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Fatal(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Fatal(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Fatal(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Fatal(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.FatalFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.FatalException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Info(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Info(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Info(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Info(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.InfoFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.InfoException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Trace(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Trace(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Trace(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Trace(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.TraceFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.TraceException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Warn(EasyNetQ.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Warn(EasyNetQ.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Warn(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.Warn(EasyNetQ.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.WarnFormat(EasyNetQ.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogExtensions.WarnException(EasyNetQ.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:EasyNetQ.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:EasyNetQ.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="T:EasyNetQ.Logging.LogLevel">
            <summary>
                The log level.
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Trace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Warn">
            <summary>
            Warn
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:EasyNetQ.Logging.LogProvider">
            <summary>
            Provides a mechanism to set the <see cref="T:EasyNetQ.Logging.ILogProvider" />.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.SetCurrentLogProvider(EasyNetQ.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:EasyNetQ.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EasyNetQ.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:EasyNetQ.Logging.LogProvider.SetCurrentLogProvider(EasyNetQ.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:EasyNetQ.Logging.ILog"/></returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:EasyNetQ.Logging.ILog"/></returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:EasyNetQ.Logging.ILog"/></returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:EasyNetQ.Logging.ILog"/></returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">A optional paramater to indicate message should be destructured.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogProviders.LibLogException">
            <summary>
            Exception thrown by LibLog.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LibLogException.#ctor(System.String)">
            <summary>
            Initializes a new LibLogException with the specified message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LibLogException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new LibLogException with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
                Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured
                data in a format string:
                For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't
                know if serilog is actually
                used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
                "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular
                .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogProviders.LogProviderBase">
            <summary>
                Base class for specific log providers.
            </summary>
        </member>
        <member name="F:EasyNetQ.Logging.LogProviders.LogProviderBase.ErrorInitializingProvider">
            <summary>
                Error message should initializing the log provider fail.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.#ctor">
            <summary>
                Initialize an instance of the <see cref="T:EasyNetQ.Logging.LogProviders.LogProviderBase"/> class by initializing the references
                to the nested and mapped diagnostics context-obtaining functions.
            </summary>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.GetOpenNdcMethod">
            <summary>
                Returns the provider-specific method to open a nested diagnostics context.
            </summary>
            <returns>A provider-specific method to open a nested diagnostics context.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.GetOpenMdcMethod">
            <summary>
                Returns the provider-specific method to open a mapped diagnostics context.
            </summary>
            <returns>A provider-specific method to open a mapped diagnostics context.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogProviders.LogProviderBase.OpenNdc">
            <summary>
                Delegate defining the signature of the method opening a nested diagnostics context.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogProviders.LogProviderBase.OpenMdc">
            <summary>
                Delegate defining the signature of the method opening a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.FindType(System.String,System.String)">
            <summary>
                Finds a type using a type name and assembly name.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="assemblyName">The name of the assembly.</param>
            <returns>The requested type or null if it was not found.</returns>
        </member>
        <member name="M:EasyNetQ.Logging.LogProviders.LogProviderBase.FindType(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Finds a type using a type name and a list of assembly names to search.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="assemblyNames">A list of assembly names to search.</param>
            <returns>The request type or null if it was not found.</returns>
        </member>
        <member name="T:EasyNetQ.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
                The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:EasyNetQ.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
                Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
                <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EasyNetQ.Logging.Logger">
            <summary>
            Logger delegate.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="messageFunc">The message function</param>
            <param name="exception">The exception</param>
            <param name="formatParameters">The format parameters</param>
            <returns>A boolean.</returns>
        </member>
        <member name="T:EasyNetQ.MessageFactory">
            <summary>
            Creates a generic <see cref="T:EasyNetQ.IMessage`1"/> and returns it casted as <see cref="T:EasyNetQ.IMessage"/>
            so it can be used in scenarios where we only have a runtime <see cref="T:System.Type"/> available.
            </summary>
        </member>
        <member name="T:EasyNetQ.MessageProperties">
            <summary>
                Represents various properties of a message
            </summary>
        </member>
        <member name="M:EasyNetQ.MessageProperties.#ctor">
            <summary>
                Creates empty MessageProperties
            </summary>
        </member>
        <member name="M:EasyNetQ.MessageProperties.#ctor(RabbitMQ.Client.IBasicProperties)">
            <summary>
                Creates MessageProperties from IBasicProperties
            </summary>
        </member>
        <member name="M:EasyNetQ.MessageProperties.CopyFrom(RabbitMQ.Client.IBasicProperties)">
            <summary>
                Copies IBasicProperties to MessageProperties
            </summary>
        </member>
        <member name="M:EasyNetQ.MessageProperties.CopyTo(RabbitMQ.Client.IBasicProperties)">
            <summary>
                Copies MessageProperties to IBasicProperties
            </summary>
        </member>
        <member name="M:EasyNetQ.MessageProperties.Clone">
            <inheritdoc />
        </member>
        <member name="P:EasyNetQ.MessageProperties.ContentType">
            <summary>
                MIME Content type
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ContentEncoding">
            <summary>
                MIME content encoding
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.Headers">
            <summary>
                Various headers
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.DeliveryMode">
            <summary>
                non-persistent (1) or persistent (2)
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.Priority">
            <summary>
                message priority, 0 to 9
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.CorrelationId">
            <summary>
                application correlation identifier
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ReplyTo">
            <summary>
                destination to reply to
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.Expiration">
            <summary>
                message expiration specification
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.MessageId">
            <summary>
                application message identifier
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.Timestamp">
            <summary>
                message timestamp
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.Type">
            <summary>
                message type name
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.UserId">
            <summary>
                creating user id
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.AppId">
            <summary>
                Application id
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ClusterId">
            <summary>
                intra-cluster routing identifier
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ContentTypePresent">
            <summary>
                True if ContentType is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ContentEncodingPresent">
            <summary>
                True if ContentEncoding is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.HeadersPresent">
            <summary>
                True if Headers is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.DeliveryModePresent">
            <summary>
                True if DeliveryMode is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.PriorityPresent">
            <summary>
                True if Priority is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.CorrelationIdPresent">
            <summary>
                True if CorrelationId is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ReplyToPresent">
            <summary>
                True if ReplyTo is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ExpirationPresent">
            <summary>
                True if Expiration is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.MessageIdPresent">
            <summary>
                True if MessageId is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.TimestampPresent">
            <summary>
                True if Timestamp is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.TypePresent">
            <summary>
                True if Type is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.UserIdPresent">
            <summary>
                True if UserId is present
            </summary>
        </member>
        <member name="P:EasyNetQ.MessageProperties.ClusterIdPresent">
            <summary>
                True if ClusterId is present
            </summary>        public bool AppIdPresent => appIdPresent;
        </member>
        <member name="M:EasyNetQ.MessageProperties.ToString">
            <inheritdoc />
        </member>
        <member name="T:EasyNetQ.MessageVersioning.ISupersede`1">
            <summary>
            Marker interface to indicate that a message supersedes a previous version.
            </summary>
            <remarks>
            Requires that <see cref="T:EasyNetQ.MessageVersioning.VersionedMessageSerializationStrategy"/> and <see cref="T:EasyNetQ.MessageVersioning.VersionedExchangeDeclareStrategy"/> are
            registered in the <see cref="T:EasyNetQ.DI.IServiceRegister"/> to take advantage of message version support.
            </remarks>
            <typeparam name="T">The type of the message being superseded.</typeparam>
            <example>
            In the following code, MessageV2 extends and supersedes MessageV1. When MessageV2 is published, it will also be routed to
            any MessageV1 subscribers.
            <code>
            <![CDATA[
            public class MessageV1
            {
            	public string SomeProperty { get; set; }
            }
            
            public class MessageV2 : MessageV1, ISupersede<MessageV1>
            {
            	public DateTime SomeOtherProperty { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:EasyNetQ.OrderedClusterHostSelectionStrategy`1">
            <summary>
            A collection that hands out the next item until success, or until every item has been tried.
            </summary>
        </member>
        <member name="M:EasyNetQ.IPersistentConnection.Initialize">
            <summary>
            Initialization method that should be called only once,
            usually right after the implementation constructor has run.
            </summary>
        </member>
        <member name="T:EasyNetQ.PersistentConnection">
            <summary>
            A connection that attempts to reconnect if the inner connection is closed.
            </summary>
        </member>
        <member name="T:EasyNetQ.Preconditions">
            <summary>
            Collection of precondition methods for qualifying method arguments.
            </summary>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckNotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null.
            </summary>
            <param name="value">
            The value to check, must not be null.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="name"/> is blank.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckNotNull``1(``0,System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null.
            </summary>
            <param name="value">
            The value to check, must not be null.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <param name="message">
            The message to provide to the exception if <paramref name="value"/>
            is null, must not be blank.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="name"/> or <paramref name="message"/> are
            blank.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckNotBlank(System.String,System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not blank.
            </summary>
            <param name="value">
            The value to check, must not be blank.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <param name="message">
            The message to provide to the exception if <paramref name="value"/>
            is blank, must not be blank.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value"/>, <paramref name="name"/>, or
            <paramref name="message"/> are blank.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckNotBlank(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not blank.
            </summary>
            <param name="value">
            The value to check, must not be blank.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value"/> or <paramref name="name"/> are
            blank.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckAny``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Ensures that <paramref name="collection"/> contains at least one
            item.
            </summary>
            <param name="collection">
            The collection to check, must not be null or empty.
            </param>
            <param name="name">
            The name of the parameter the collection is taken from, must not be
            blank.
            </param>
            <param name="message">
            The message to provide to the exception if <paramref name="collection"/>
            is empty, must not be blank.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="collection"/> is empty, or <c>null</c>.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckTrue(System.Boolean,System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is <c>true</c>.
            </summary>
            <param name="value">
            The value to check, must be <c>true</c>.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <param name="message">
            The message to provide to the exception if <paramref name="value"/>
            is <c>false</c>, must not be blank.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value"/> is <c>false</c>, or if <paramref name="name"/>
            or <paramref name="message"/> are blank.
            </exception>
        </member>
        <member name="M:EasyNetQ.Preconditions.CheckFalse(System.Boolean,System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is <c>false</c>.
            </summary>
            <param name="value">
            The value to check, must be <c>false</c>.
            </param>
            <param name="name">
            The name of the parameter the value is taken from, must not be
            blank.
            </param>
            <param name="message">
            The message to provide to the exception if <paramref name="value"/>
            is <c>true</c>, must not be blank.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value"/> is <c>true</c>, or if <paramref name="name"/>
            or <paramref name="message"/> are blank.
            </exception>
        </member>
        <member name="T:EasyNetQ.Producer.ClientCommandDispatcher">
            <summary>
            Invokes client commands on a single channel. All commands are marshalled onto
            a single thread.
            </summary>
        </member>
        <member name="T:EasyNetQ.Producer.IClientCommandDispatcher">
            <summary>
            Responsible for invoking client commands.
            </summary>
        </member>
        <member name="T:EasyNetQ.Producer.IResponderConfiguration">
            <summary>
            Allows configuration to be fluently extended without adding overloads to IBus
            
            e.g.
            x => x.WithPrefetchCount(50)
            </summary>
        </member>
        <member name="M:EasyNetQ.Producer.IResponderConfiguration.WithQueueName(System.String)">
            <summary>
            Sets the queue name
            </summary>
            <param name="queueName"></param>
            <returns>Reference to the same <see cref="T:EasyNetQ.Producer.IResponderConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.Producer.IResponderConfiguration.WithDurable(System.Boolean)">
            <summary>
            Configures the queue's durability
            </summary>
            <returns>Reference to the same <see cref="T:EasyNetQ.Producer.IResponderConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="M:EasyNetQ.Producer.IResponderConfiguration.WithExpires(System.Int32)">
            <summary>
            Expiry time can be set for a given queue by setting the x-expires argument to queue.declare, or by setting the expires policy. 
            This controls for how long a queue can be unused before it is automatically deleted. 
            Unused means the queue has no consumers, the queue has not been redeclared, and basic.get has not been invoked for a duration of at least the expiration period. 
            This can be used, for example, for RPC-style reply queues, where many queues can be created which may never be drained.
            The server guarantees that the queue will be deleted, if unused for at least the expiration period. 
            No guarantee is given as to how promptly the queue will be removed after the expiration period has elapsed. 
            Leases of durable queues restart when the server restarts.
            </summary>
            <param name="expires">The value of the x-expires argument or expires policy describes the expiration period in milliseconds and is subject to the same constraints as x-message-ttl and cannot be zero. Thus a value of 1000 means a queue which is unused for 1 second will be deleted.</param>
            <returns>Reference to the same <see cref="T:EasyNetQ.Producer.IResponderConfiguration"/> to allow methods chaining.</returns>
        </member>
        <member name="P:EasyNetQ.Producer.ResponderConfiguration.Durable">
            <summary>
            Durable queues remain active when a server restarts.
            </summary>
        </member>
        <member name="P:EasyNetQ.Producer.ResponderConfiguration.Expires">
            <summary>
            Determines how long (in milliseconds) a queue can remain unused before it is automatically deleted by the server.
            </summary>
        </member>
        <member name="T:EasyNetQ.Producer.IRpc">
            <summary>
            An RPC style request-response pattern
            </summary>
        </member>
        <member name="M:EasyNetQ.Producer.IRpc.Request``2(``0,System.Action{EasyNetQ.FluentConfiguration.IRequestConfiguration})">
            <summary>
            Make a request to an RPC service
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="request">The request message</param>
            <returns>Returns a task that yields the result when the response arrives</returns>
        </member>
        <member name="M:EasyNetQ.Producer.IRpc.Respond``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Set up a responder for an RPC service.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="responder">A function that performs the response</param>
        </member>
        <member name="M:EasyNetQ.Producer.IRpc.Respond``2(System.Func{``0,System.Threading.Tasks.Task{``1}},System.Action{EasyNetQ.Producer.IResponderConfiguration})">
            <summary>
            Set up a responder for an RPC service.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="responder">A function that performs the response</param>
            <param name="configure">A function that performs the configuration</param>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Send``1(System.String,``0)">
            <summary>
            Send a message to the specified queue
            </summary>
            <typeparam name="T">The type of message to send</typeparam>
            <param name="queue">The queue to send the message to</param>
            <param name="message">The message to send</param>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.SendAsync``1(System.String,``0)">
            <summary>
            Send a message to the specified queue
            </summary>
            <typeparam name="T">The type of message to send</typeparam>
            <param name="queue">The queue to send the message to</param>
            <param name="message">The message to send</param>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive``1(System.String,System.Action{``0})">
            <summary>
            Receive a message from the specified queue
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The synchronous function that handles the message</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive``1(System.String,System.Action{``0},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive a message from the specified queue
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The synchronous function that handles the message</param>
            <param name="configure">Action to configure consumer with</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive``1(System.String,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Receive a message from the specified queue
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The asynchronous function that handles the message</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive``1(System.String,System.Func{``0,System.Threading.Tasks.Task},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive a message from the specified queue
            </summary>
            <typeparam name="T">The type of message to receive</typeparam>
            <param name="queue">The queue to receive from</param>
            <param name="onMessage">The asynchronous function that handles the message</param>
            <param name="configure">Action to configure consumer with</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive(System.String,System.Action{EasyNetQ.Consumer.IReceiveRegistration})">
            <summary>
            Receive a message from the specified queue. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="M:EasyNetQ.Producer.ISendReceive.Receive(System.String,System.Action{EasyNetQ.Consumer.IReceiveRegistration},System.Action{EasyNetQ.Consumer.IConsumerConfiguration})">
            <summary>
            Receive a message from the specified queue. Dispatch them to the given handlers
            </summary>
            <param name="queue">The queue to take messages from</param>
            <param name="addHandlers">A function to add handlers</param>
            <param name="configure">Action to configure consumer with</param>
            <returns>Consumer cancellation. Call Dispose to stop consuming</returns>
        </member>
        <member name="T:EasyNetQ.Producer.Rpc">
            <summary>
            Default implementation of EasyNetQ's request-response pattern
            </summary>
        </member>
        <member name="T:EasyNetQ.RabbitHutch">
            <summary>
            Static methods to create EasyNetQ core APIs.
            </summary>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            The RabbitMQ broker is defined in the connection string named 'rabbit'.
            </summary>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            The RabbitMQ broker is defined in the connection string named 'rabbit'.
            </summary>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(System.String)">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="connectionString">
            The EasyNetQ connection string. Example:
            host=192.168.1.1;port=5672;virtualHost=MyVirtualHost;username=MyUsername;password=MyPassword;requestedHeartbeat=10
            
            The following default values will be used if not specified:
            host=localhost;port=5672;virtualHost=/;username=guest;password=guest;requestedHeartbeat=10
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(System.String,System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="connectionString">
            The EasyNetQ connection string. Example:
            host=192.168.1.1;port=5672;virtualHost=MyVirtualHost;username=MyUsername;password=MyPassword;requestedHeartbeat=10
            
            The following default values will be used if not specified:
            host=localhost;port=5672;virtualHost=/;username=guest;password=guest;requestedHeartbeat=10
            </param>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(System.String,System.UInt16,System.String,System.String,System.String,System.UInt16,System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="hostName">
            The RabbitMQ broker.
            </param>
            <param name="hostPort">
            The RabbitMQ broker port.
            </param>
            <param name="virtualHost">
            The RabbitMQ virtualHost.
            </param>
            <param name="username">
            The username to use to connect to the RabbitMQ broker.
            </param>
            <param name="password">
            The password to use to connect to the RabbitMQ broker.
            </param>
            <param name="requestedHeartbeat">
            The initially requested heartbeat interval, in seconds; zero for none.
            </param>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(EasyNetQ.ConnectionConfiguration,System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="connectionConfiguration">
            An <see cref="T:EasyNetQ.ConnectionConfiguration"/> instance.
            </param>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.CreateBus(System.Func{EasyNetQ.DI.IServiceResolver,EasyNetQ.ConnectionConfiguration},System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Creates a new instance of <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="connectionConfigurationFactory">
            A factory of <see cref="T:EasyNetQ.ConnectionConfiguration"/> instance.
            </param>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.RabbitHutch.RegisterBus(EasyNetQ.DI.IServiceRegister,System.Func{EasyNetQ.DI.IServiceResolver,EasyNetQ.ConnectionConfiguration},System.Action{EasyNetQ.DI.IServiceRegister})">
            <summary>
            Registers components of a <see cref="T:EasyNetQ.RabbitBus"/>.
            </summary>
            <param name="serviceRegister"/>
            <param name="connectionConfigurationFactory">
            A factory of <see cref="T:EasyNetQ.ConnectionConfiguration"/> instance.
            </param>
            <param name="registerServices">
            Override default services. For example, to override the default <see cref="T:EasyNetQ.ISerializer"/>:
            RabbitHutch.CreateBus("host=localhost", x => x.Register{ISerializer}(mySerializer));
            </param>
            <returns>
            A new <see cref="T:EasyNetQ.RabbitBus"/> instance.
            </returns>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.DateTime,``0)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.DateTime,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.DateTime,System.String,``0)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.DateTime,System.String,System.String,``0)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.TimeSpan,``0)">
            <summary>
            Schedule a message to be published at some time in the future, using bare RabbitMQ's capabilities (message time-to-live and dead letter exchange).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublish``1(EasyNetQ.IBus,System.TimeSpan,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future, using bare RabbitMQ's capabilities (message time-to-live and dead letter exchange).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.CancelFuturePublish(EasyNetQ.IBus,System.String)">
            <summary>
            Unschedule all messages matching the cancellationKey.
            </summary>
            <param name="bus">The IBus instance to publish on</param>
            <param name="cancellationKey">The identifier that was used when originally scheduling the message with FuturePublish</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.DateTime,``0)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.DateTime,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.DateTime,System.String,``0)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.DateTime,System.String,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.TimeSpan,``0)">
            <summary>
            Schedule a message to be published at some time in the future, using bare RabbitMQ's capabilities (message time-to-live and dead letter exchange).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.FuturePublishAsync``1(EasyNetQ.IBus,System.TimeSpan,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future, using bare RabbitMQ's capabilities (message time-to-live and dead letter exchange).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="bus">The IBus instance to publish on</param>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.BusExtensions.CancelFuturePublishAsync(EasyNetQ.IBus,System.String)">
            <summary>
            Unschedule all messages matching the cancellationKey.
            </summary>
            <param name="bus">The IBus instance to publish on</param>
            <param name="cancellationKey">The identifier that was used when originally scheduling the message with FuturePublish</param>
        </member>
        <member name="T:EasyNetQ.Scheduling.IScheduler">
            <summary>
            Provides a simple Publish API to schedule a message to be published at some time in the future.
            </summary>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublishAsync``1(System.DateTime,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublishAsync``1(System.DateTime,``0,System.String,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublish``1(System.DateTime,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublish``1(System.DateTime,``0,System.String,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="futurePublishDate">The time at which the message should be sent (UTC)</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublishAsync``1(System.TimeSpan,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublishAsync``1(System.TimeSpan,``0,System.String,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublish``1(System.TimeSpan,``0,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.FuturePublish``1(System.TimeSpan,``0,System.String,System.String)">
            <summary>
            Schedule a message to be published at some time in the future.
            This required the EasyNetQ.Scheduler service to be running.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="messageDelay">The delay time for message to publish in future</param>
            <param name="message">The message to response with</param>
            <param name="topic">The topic string</param>
            <param name="cancellationKey">An identifier that can be used with CancelFuturePublish to cancel the sending of this message at a later time</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.CancelFuturePublishAsync(System.String)">
            <summary>
            Unschedule all messages matching the cancellationKey.
            </summary>
            <param name="cancellationKey">The identifier that was used when originally scheduling the message with FuturePublish</param>
        </member>
        <member name="M:EasyNetQ.Scheduling.IScheduler.CancelFuturePublish(System.String)">
            <summary>
            Unschedule all messages matching the cancellationKey.
            </summary>
            <param name="cancellationKey">The identifier that was used when originally scheduling the message with FuturePublish</param>
        </member>
        <member name="T:EasyNetQ.Sprache.Parse">
            <summary>
            Parsers and combinators.
            </summary>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Char(System.Predicate{System.Char},System.String)">
            <summary>
            TryParse a single character matching 'predicate'
            </summary>
            <param name="predicate"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.CharExcept(System.Predicate{System.Char},System.String)">
            <summary>
            Parse a single character except those matching <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Characters not to match.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>A parser for characters except those matching <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Char(System.Char)">
            <summary>
            Parse a single character c.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.CharCaseInsensitive(System.Char)">
            <summary>
            Parse a single character c.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.CharExcept(System.Char)">
            <summary>
            Parse a single character except c.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.String(System.String)">
            <summary>
            Parse a string of characters.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.CaseInsensitiveString(System.String)">
            <summary>
            Parse a string of characters.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Then``2(EasyNetQ.Sprache.Parser{``0},System.Func{``0,EasyNetQ.Sprache.Parser{``1}})">
            <summary>
            Parse first, and if successful, then parse second.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Many``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
            <remarks>Implemented imperatively to decrease stack usage.</remarks>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.XMany``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements. If any element is partially parsed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
            <remarks>Implemented imperatively to decrease stack usage.</remarks>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.AtLeastOnce``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            TryParse a stream of elements with at least one item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.End``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse end-of-input.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Select``2(EasyNetQ.Sprache.Parser{``0},System.Func{``0,``1})">
            <summary>
            Take the result of parsing, and project it onto a different domain.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Token``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse the token, embedded in any amount of whitespace characters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Ref``1(System.Func{EasyNetQ.Sprache.Parser{``0}})">
            <summary>
            Refer to another parser indirectly. This allows circular compile-time dependency between parsers.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Text(EasyNetQ.Sprache.Parser{System.Collections.Generic.IEnumerable{System.Char}})">
            <summary>
            Convert a stream of characters to a string.
            </summary>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Or``1(EasyNetQ.Sprache.Parser{``0},EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse first, if it succeeds, return first, otherwise try second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Named``1(EasyNetQ.Sprache.Parser{``0},System.String)">
            <summary>
            Names part of the grammar for help with error messages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.XOr``1(EasyNetQ.Sprache.Parser{``0},EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse first, if it succeeds, return first, otherwise try second.
            Assumes that the first parsed character will determine the parser chosen (see Try).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Once``1(EasyNetQ.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements containing only one item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Concat``1(EasyNetQ.Sprache.Parser{System.Collections.Generic.IEnumerable{``0}},EasyNetQ.Sprache.Parser{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenate two streams of elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Return``1(``0)">
            <summary>
            Succeed immediately and return value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Return``2(EasyNetQ.Sprache.Parser{``0},``1)">
            <summary>
            Version of Return with simpler inline syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Except``2(EasyNetQ.Sprache.Parser{``0},EasyNetQ.Sprache.Parser{``1})">
            <summary>
            Attempt parsing only if the <paramref name="except"/> parser fails.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="except"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Until``2(EasyNetQ.Sprache.Parser{``0},EasyNetQ.Sprache.Parser{``1})">
            <summary>
            Parse a sequence of items until a terminator is reached.
            Returns the sequence, discarding the terminator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="until"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.Where``1(EasyNetQ.Sprache.Parser{``0},System.Func{``0,System.Boolean})">
            <summary>
            Succeed if the parsed value matches predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.SelectMany``3(EasyNetQ.Sprache.Parser{``0},System.Func{``0,EasyNetQ.Sprache.Parser{``1}},System.Func{``0,``1,``2})">
            <summary>
            Monadic combinator Then, adapted for Linq comprehension syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="parser"></param>
            <param name="selector"></param>
            <param name="projector"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.ChainOperator``2(EasyNetQ.Sprache.Parser{``1},EasyNetQ.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a left-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="M:EasyNetQ.Sprache.Parse.ChainRightOperator``2(EasyNetQ.Sprache.Parser{``1},EasyNetQ.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a right-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="T:EasyNetQ.SystemMessages.Error">
            <summary>
            A wrapper for errored messages
            </summary>
        </member>
        <member name="T:EasyNetQ.Topology.IQueue">
            <summary>
            Represents an AMQP queue
            </summary>
        </member>
        <member name="P:EasyNetQ.Topology.IQueue.Name">
            <summary>
            The name of the queue
            </summary>
        </member>
        <member name="P:EasyNetQ.Topology.IQueue.IsExclusive">
            <summary>
            Is this queue transient?
            </summary>
        </member>
    </members>
</doc>
